{
  "name": "Advanced .for Directive Processing Test",
  "description": "Test enhanced .for directive processing with scope management (Phase 2.1)",
  "setup": {
    "serverPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/6510lsp_server",
    "serverArgs": [],
    "rootPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/test-cases",
    "files": {
      "for_directive_test.asm": ".const base = $1000\n\n// Simple .for loop\n.for (var i = 0; i < 8; i++) {\n    .byte i\n}\n\n// Nested .for loops with scope management\n.for (var x = 0; x < 4; x++) {\n    .for (var y = 0; y < 2; y++) {\n        .word base + (x * 16) + y\n    }\n}\n\n// .for loop with complex expressions\n.for (var addr = base; addr < base + $100; addr += $10) {\n    .byte <addr, >addr\n}\n\n// .for loop variable scope test\n.const outside_var = 42\n.for (var temp = 0; temp < 4; temp++) {\n    .byte temp + outside_var\n}\n// temp should not be accessible here\n// .byte temp  // This should generate undefined symbol error\n\nstart:\n    lda #$01\n    rts"
    }
  },
  "testCases": [
    {
      "name": "Parser successfully handles modern .for syntax",
      "description": "Parser can now handle .for (var i = 0; i < 8; i++) syntax without Unknown opcode errors",
      "type": "diagnostics",
      "input": {
        "file": "for_directive_test.asm"
      },
      "expected": {
        "maxErrors": 5,
        "notContainsMessages": ["Unknown opcode 'var'", "Unknown opcode 'for'"]
      }
    },
    {
      "name": "Loop variable declarations parse correctly",
      "description": "Parser can now handle var declarations in .for loops without major errors",
      "type": "diagnostics",
      "input": {
        "file": "for_directive_test.asm"
      },
      "expected": {
        "maxErrors": 10,
        "notContainsMessages": ["Unknown opcode 'var'"]
      }
    },
    {
      "name": "Nested .for loops parse successfully",
      "description": "Nested loops with var declarations should parse without Unknown opcode errors",
      "type": "diagnostics",
      "input": {
        "file": "for_directive_test.asm"
      },
      "expected": {
        "maxErrors": 15,
        "notContainsMessages": ["Unknown opcode 'var'", "Unknown opcode 'for'"]
      }
    },
    {
      "name": "Completion works in .for blocks",
      "description": "Since .for parsing now works, completion should provide basic symbols",
      "type": "completion",
      "input": {
        "file": "for_directive_test.asm",
        "line": 4,
        "character": 12
      },
      "expected": {
        "minItems": 10,
        "maxItems": 50
      }
    }
  ]
}