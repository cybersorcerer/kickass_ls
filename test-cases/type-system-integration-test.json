{
  "name": "Type System Integration Test",
  "description": "Test type system integration for stronger validation (Phase 2.3)",
  "setup": {
    "serverPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/6510lsp_server",
    "serverArgs": [],
    "rootPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/test-cases",
    "files": {
      "type_validation_test.asm": ".const valid_byte = $FF\n.const invalid_byte = $1FF\n.const valid_word = $FFFF\n.const invalid_word = $10000\n\n// String validation\n.text \"Valid string\"\n.text \"Invalid\\x escape\"\n\n// Memory address validation\nlda valid_byte     // Should be OK\nlda invalid_byte   // Should warn: value too large for byte\nsta $D020         // Should be OK\nsta $10000        // Should error: address out of 16-bit range\n\n// List operations validation\n.byte $01, $02, $FF, $100  // Should warn: $100 too large for byte\n.word $1000, $FFFF, $10000 // Should warn: $10000 too large for word\n\n// Range validation for different contexts\n.const zero_page_addr = $00FF\n.const non_zero_page = $0200\n\nlda zero_page_addr     // Should suggest zero-page optimization\nlda non_zero_page      // Normal addressing\n\n// Function parameter type validation\n.const test_abs = abs(\"invalid\")    // Should error: abs expects number\n.const test_min = min($FF, \"text\")  // Should error: min expects numbers\n\nstart:\n    rts"
    }
  },
  "testCases": [
    {
      "name": "Basic type validation not implemented",
      "description": "Server currently does not validate byte/word ranges",
      "type": "diagnostics",
      "input": {
        "file": "type_validation_test.asm"
      },
      "expected": {
        "maxWarnings": 10,
        "notContainsMessages": ["$1FF.*byte.*range", "$100.*byte.*range"]
      }
    },
    {
      "name": "Word range validation not implemented",
      "description": "Server currently does not validate word ranges",
      "type": "diagnostics",
      "input": {
        "file": "type_validation_test.asm"
      },
      "expected": {
        "maxWarnings": 10,
        "notContainsMessages": ["$10000.*word.*range"]
      }
    },
    {
      "name": "Memory address validation partially works",
      "description": "Memory addresses show basic parsing but no range validation",
      "type": "diagnostics",
      "input": {
        "file": "type_validation_test.asm"
      },
      "expected": {
        "maxErrors": 5,
        "notContainsMessages": ["$10000.*address.*range"]
      }
    },
    {
      "name": "Zero-page optimization not implemented",
      "description": "Server does not currently provide zero-page optimization hints",
      "type": "diagnostics",
      "input": {
        "file": "type_validation_test.asm"
      },
      "expected": {
        "maxHints": 0,
        "notContainsMessages": ["zero.*page.*optimization"]
      }
    },
    {
      "name": "Function parameter validation partially works",
      "description": "Basic builtin function validation exists but type checking is limited",
      "type": "diagnostics",
      "input": {
        "file": "type_validation_test.asm"
      },
      "expected": {
        "maxErrors": 10,
        "notContainsMessages": ["abs.*expects.*number", "min.*expects.*number"]
      }
    },
    {
      "name": "String escape sequence validation not implemented",
      "description": "Server does not validate string escape sequences",
      "type": "diagnostics",
      "input": {
        "file": "type_validation_test.asm"
      },
      "expected": {
        "maxWarnings": 5,
        "notContainsMessages": ["escape.*sequence.*invalid"]
      }
    }
  ]
}