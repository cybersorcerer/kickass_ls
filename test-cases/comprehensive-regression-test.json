{
  "name": "Comprehensive Regression Test",
  "description": "CRITICAL: Must detect when semantic analysis breaks - verifies minimum diagnostic counts",
  "setup": {
    "serverPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/6510lsp_server",
    "serverArgs": [],
    "rootPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/test-cases",
    "files": {
      "comprehensive_regression.asm": ".const base = $1000\n.const unused_const = 42\n\n// Illegal characters from bitwise operators\n.const shifted = base << 2\n.const masked = base & $FF\n.const ored = base | $0F\n.const xored = base ^ $AA\n\nstart:\n    lda #$01\n    sta base\n    \n    // These should generate errors\n    lda undefined_symbol\n    jmp unknown_label\n    \n    // This should generate warnings\n    dcp $ff          // Illegal opcode\n    \n    // Unused symbols should generate hints\n    \n    rts\n\n// Unreferenced label should generate warnings\nunreferenced_label:\n    nop\n    rts"
    }
  },
  "testCases": [
    {
      "name": "REGRESSION: Lexer must not generate illegal character errors for bitwise operators",
      "description": "CRITICAL: << >> & | ^ operators must be recognized, not flagged as illegal",
      "type": "diagnostics",
      "input": {
        "file": "comprehensive_regression.asm"
      },
      "expected": {
        "maxErrors": 10,
        "notContainsMessages": [
          "illegal character"
        ]
      }
    },
    {
      "name": "REGRESSION: Semantic analysis must generate multiple diagnostics",
      "description": "CRITICAL: Must generate multiple errors/warnings/hints - if only 1 diagnostic, semantic analysis is broken",
      "type": "diagnostics",
      "input": {
        "file": "comprehensive_regression.asm"
      },
      "expected": {
        "minErrors": 2,
        "maxErrors": 10,
        "minWarnings": 1,
        "maxWarnings": 10,
        "minHints": 0,
        "maxHints": 5,
        "containsMessages": [
          "undefined_symbol",
          "unknown_label"
        ]
      }
    },
    {
      "name": "REGRESSION: Undefined symbol detection must work",
      "description": "CRITICAL: Must detect undefined symbols - basic semantic analysis",
      "type": "diagnostics",
      "input": {
        "file": "comprehensive_regression.asm"
      },
      "expected": {
        "containsMessages": [
          "undefined_symbol"
        ]
      }
    },
    {
      "name": "REGRESSION: Illegal opcode warnings must work",
      "description": "CRITICAL: Must warn about illegal opcodes like 'dcp'",
      "type": "diagnostics",
      "input": {
        "file": "comprehensive_regression.asm"
      },
      "expected": {
        "minWarnings": 1,
        "containsMessages": [
          "dcp"
        ]
      }
    }
  ]
}