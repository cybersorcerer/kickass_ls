{
  "name": "For Loop Scope Management Test",
  "description": "Test proper scope management for .for loop variables (Phase 2.1)",
  "setup": {
    "serverPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/6510lsp_server",
    "serverArgs": [],
    "rootPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/test-cases",
    "files": {
      "scope_test.asm": ".const base = $1000\n\n// .for loop with scoped variable\n.for (var loop_var = 0; loop_var < 4; loop_var++) {\n    .byte loop_var\n}\n\n// This should generate an undefined symbol error\n.byte loop_var\n\nstart:\n    lda #$01\n    rts"
    }
  },
  "testCases": [
    {
      "name": "Parser successfully handles .for loop with var declaration",
      "description": "Parser can now handle .for (var x = 0; x < 4; x++) syntax without Unknown opcode errors",
      "type": "diagnostics",
      "input": {
        "file": "scope_test.asm"
      },
      "expected": {
        "maxErrors": 5,
        "notContainsMessages": ["Unknown opcode 'var'", "Unknown opcode 'for'"]
      }
    },
    {
      "name": "Basic completion works in .for blocks",
      "description": "Since .for parsing now works, basic completion should be available",
      "type": "completion",
      "input": {
        "file": "scope_test.asm",
        "line": 4,
        "character": 11
      },
      "expected": {
        "minItems": 10,
        "maxItems": 50
      }
    }
  ]
}