{
  "name": "Conditional Directive Analysis Test",
  "description": "Test .if/.ifdef/.ifndef directive analysis with dead code detection (Phase 2.2)",
  "setup": {
    "serverPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/6510lsp_server",
    "serverArgs": [],
    "rootPath": "/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/test-cases",
    "files": {
      "conditional_test.asm": ".const debug_mode = 1\n.const release_build = 0\n\n// Simple .if directive\n.if (debug_mode) {\n    lda #$ff\n    sta $d020\n} else {\n    lda #$00\n    sta $d020\n}\n\n// Dead code detection\n.if (0) {\n    // This code should be flagged as dead code\n    lda #$dead\n    sta $beef\n}\n\n// .ifdef directive\n.ifdef debug_mode {\n    .byte $de, $bu, $g1\n}\n\n// .ifndef directive  \n.ifndef undefined_symbol {\n    .byte $no, $tu, $nd\n}\n\n// Nested conditionals\n.if (debug_mode) {\n    .if (release_build) {\n        // This should be dead code since release_build = 0\n        .byte $never, $reached\n    } else {\n        .byte $debug, $active\n    }\n}\n\nstart:\n    rts"
    }
  },
  "testCases": [
    {
      "name": "Parser successfully handles .if/.else syntax",
      "description": "Parser should successfully parse .if/.else constructs without errors",
      "type": "diagnostics",
      "input": {
        "file": "conditional_test.asm"
      },
      "expected": {
        "maxErrors": 3,
        "notContainsMessages": ["Unknown opcode 'else'", "Unknown opcode 'var'", "parsing failed"]
      }
    },
    {
      "name": "Dead code detection for constant false conditions",
      "description": "Code inside .if (0) should be flagged for potential dead code analysis",
      "type": "diagnostics",
      "input": {
        "file": "conditional_test.asm"
      },
      "expected": {
        "maxErrors": 5,
        "maxWarnings": 10
      }
    },
    {
      "name": "Nested conditionals parse successfully",
      "description": "Parser should handle nested .if statements without major parsing errors",
      "type": "diagnostics",
      "input": {
        "file": "conditional_test.asm"
      },
      "expected": {
        "maxErrors": 10,
        "notContainsMessages": ["Unknown opcode 'else'", "Unknown opcode 'if'"]
      }
    },
    {
      "name": "Symbol completion works in conditional blocks",
      "description": "Symbols should be available for completion inside conditional blocks",
      "type": "completion",
      "input": {
        "file": "conditional_test.asm",
        "line": 5,
        "character": 8
      },
      "expected": {
        "containsItems": [{"label": "debug_mode"}],
        "minItems": 3
      }
    },
    {
      "name": "Hover information for conditional symbols",
      "description": "Hovering over symbols in conditionals should show information",
      "type": "hover",
      "input": {
        "file": "conditional_test.asm",
        "line": 4,
        "character": 5
      },
      "expected": {
        "contains": "debug_mode"
      }
    }
  ]
}