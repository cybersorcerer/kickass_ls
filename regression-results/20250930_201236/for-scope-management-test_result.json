[
  {
    "testCase": {
      "name": "Parser fails on .for loop with var declaration",
      "description": "Parser cannot handle .for (var x = 0; x \u003c 4; x++) syntax",
      "type": "diagnostics",
      "input": {
        "file": "scope_test.asm",
        "line": 0,
        "character": 0
      },
      "expected": {}
    },
    "status": "PASS",
    "duration": 0
  },
  {
    "testCase": {
      "name": "Loop variable not recognized in completion",
      "description": "Since .for parsing fails, loop variables don't exist in symbol table",
      "type": "completion",
      "input": {
        "file": "scope_test.asm",
        "line": 4,
        "character": 11
      },
      "expected": {
        "maxItems": 20
      }
    },
    "status": "FAIL",
    "message": "expected at most 20 items, got 45",
    "duration": 0,
    "details": [
      {
        "label": "abs",
        "kind": 3,
        "detail": "abs(value: number): number",
        "documentation": "**math**\n\nReturns the absolute value of a number\n\n**Example:** `abs(-5)    // Returns 5`",
        "insertText": "abs(${1})"
      },
      {
        "label": "sin",
        "kind": 3,
        "detail": "sin(angle: number): number",
        "documentation": "**math**\n\nReturns the sine of an angle (in radians)\n\n**Example:** `sin(toRadians(90))  // Returns 1.0`",
        "insertText": "sin(${1})"
      },
      {
        "label": "cos",
        "kind": 3,
        "detail": "cos(angle: number): number",
        "documentation": "**math**\n\nReturns the cosine of an angle (in radians)\n\n**Example:** `cos(0)              // Returns 1.0`",
        "insertText": "cos(${1})"
      },
      {
        "label": "tan",
        "kind": 3,
        "detail": "tan(angle: number): number",
        "documentation": "**math**\n\nReturns the tangent of an angle (in radians)\n\n**Example:** `tan(toRadians(45))  // Returns 1.0`",
        "insertText": "tan(${1})"
      },
      {
        "label": "sqrt",
        "kind": 3,
        "detail": "sqrt(value: number): number",
        "documentation": "**math**\n\nReturns the square root of a number\n\n**Example:** `sqrt(16)            // Returns 4.0`",
        "insertText": "sqrt(${1})"
      },
      {
        "label": "pow",
        "kind": 3,
        "detail": "pow(base: number, exponent: number): number",
        "documentation": "**math**\n\nReturns the value of a number raised to the power of another number\n\n**Example:** `pow(2, 3)           // Returns 8.0`",
        "insertText": "pow(${1})"
      },
      {
        "label": "floor",
        "kind": 3,
        "detail": "floor(value: number): number",
        "documentation": "**math**\n\nReturns the largest integer less than or equal to a number\n\n**Example:** `floor(3.7)          // Returns 3.0`",
        "insertText": "floor(${1})"
      },
      {
        "label": "ceil",
        "kind": 3,
        "detail": "ceil(value: number): number",
        "documentation": "**math**\n\nReturns the smallest integer greater than or equal to a number\n\n**Example:** `ceil(3.2)           // Returns 4.0`",
        "insertText": "ceil(${1})"
      },
      {
        "label": "round",
        "kind": 3,
        "detail": "round(value: number): number",
        "documentation": "**math**\n\nReturns the value of a number rounded to the nearest integer\n\n**Example:** `round(3.6)          // Returns 4.0`",
        "insertText": "round(${1})"
      },
      {
        "label": "max",
        "kind": 3,
        "detail": "max(a: number, b: number): number",
        "documentation": "**math**\n\nReturns the larger of two numbers\n\n**Example:** `max(5, 10)          // Returns 10`",
        "insertText": "max(${1})"
      },
      {
        "label": "min",
        "kind": 3,
        "detail": "min(a: number, b: number): number",
        "documentation": "**math**\n\nReturns the smaller of two numbers\n\n**Example:** `min(5, 10)          // Returns 5`",
        "insertText": "min(${1})"
      },
      {
        "label": "mod",
        "kind": 3,
        "detail": "mod(dividend: number, divisor: number): number",
        "documentation": "**math**\n\nReturns the remainder of a division operation\n\n**Example:** `mod(10, 3)          // Returns 1`",
        "insertText": "mod(${1})"
      },
      {
        "label": "random",
        "kind": 3,
        "detail": "random(): number",
        "documentation": "**math**\n\nReturns a random number between 0.0 and 1.0\n\n**Example:** `random()            // Returns 0.0 to 1.0`",
        "insertText": "random(${1})"
      },
      {
        "label": "toRadians",
        "kind": 3,
        "detail": "toRadians(degrees: number): number",
        "documentation": "**math**\n\nConverts degrees to radians\n\n**Example:** `toRadians(90)       // Returns PI/2`",
        "insertText": "toRadians(${1})"
      },
      {
        "label": "toDegrees",
        "kind": 3,
        "detail": "toDegrees(radians: number): number",
        "documentation": "**math**\n\nConverts radians to degrees\n\n**Example:** `toDegrees(PI)       // Returns 180`",
        "insertText": "toDegrees(${1})"
      },
      {
        "label": "LoadBinary",
        "kind": 3,
        "detail": "LoadBinary(filename: string): List\u003cbyte\u003e",
        "documentation": "**file**\n\nLoads binary data from a file and returns it as a list of bytes\n\n**Example:** `LoadBinary(\"music.bin\")`",
        "insertText": "LoadBinary(${1})"
      },
      {
        "label": "LoadPicture",
        "kind": 3,
        "detail": "LoadPicture(filename: string): List\u003cList\u003cpixel\u003e\u003e",
        "documentation": "**file**\n\nLoads a picture file and returns it as a multidimensional list\n\n**Example:** `LoadPicture(\"sprite.png\")`",
        "insertText": "LoadPicture(${1})"
      },
      {
        "label": "LoadSid",
        "kind": 3,
        "detail": "LoadSid(filename: string): SidInfo",
        "documentation": "**file**\n\nLoads a SID music file and returns song information\n\n**Example:** `LoadSid(\"music.sid\")`",
        "insertText": "LoadSid(${1})"
      },
      {
        "label": "createFile",
        "kind": 3,
        "detail": "createFile(filename: string): File",
        "documentation": "**file**\n\nCreates a new file for writing data\n\n**Example:** `createFile(\"output.bin\")`",
        "insertText": "createFile(${1})"
      },
      {
        "label": "toIntString",
        "kind": 3,
        "detail": "toIntString(value: number): string",
        "documentation": "**string**\n\nConverts a number to its string representation\n\n**Example:** `toIntString(42)      // Returns \"42\"`",
        "insertText": "toIntString(${1})"
      },
      {
        "label": "toHexString",
        "kind": 3,
        "detail": "toHexString(value: number): string",
        "documentation": "**string**\n\nConverts a number to its hexadecimal string representation\n\n**Example:** `toHexString(255)     // Returns \"ff\"`",
        "insertText": "toHexString(${1})"
      },
      {
        "label": "toBinaryString",
        "kind": 3,
        "detail": "toBinaryString(value: number): string",
        "documentation": "**string**\n\nConverts a number to its binary string representation\n\n**Example:** `toBinaryString(5)    // Returns \"101\"`",
        "insertText": "toBinaryString(${1})"
      },
      {
        "label": "Vector",
        "kind": 3,
        "detail": "Vector(x: number, y: number, z: number): Vector3D",
        "documentation": "**3d**\n\nCreates a 3D vector with x, y, z components\n\n**Example:** `Vector(1, 0, 0)      // Unit vector along X axis`",
        "insertText": "Vector(${1})"
      },
      {
        "label": "Matrix",
        "kind": 3,
        "detail": "Matrix(): Matrix4x4",
        "documentation": "**3d**\n\nCreates a 4x4 transformation matrix\n\n**Example:** `Matrix()             // Identity matrix`",
        "insertText": "Matrix(${1})"
      },
      {
        "label": "RotationMatrix",
        "kind": 3,
        "detail": "RotationMatrix(axis: Vector3D, angle: number): Matrix4x4",
        "documentation": "**3d**\n\nCreates a rotation matrix around the specified axis\n\n**Example:** `RotationMatrix(Vector(0,1,0), toRadians(90))`",
        "insertText": "RotationMatrix(${1})"
      },
      {
        "label": "ScaleMatrix",
        "kind": 3,
        "detail": "ScaleMatrix(x: number, y: number, z: number): Matrix4x4",
        "documentation": "**3d**\n\nCreates a scaling matrix with the specified scale factors\n\n**Example:** `ScaleMatrix(2, 2, 2) // Uniform 2x scaling`",
        "insertText": "ScaleMatrix(${1})"
      },
      {
        "label": "MoveMatrix",
        "kind": 3,
        "detail": "MoveMatrix(x: number, y: number, z: number): Matrix4x4",
        "documentation": "**3d**\n\nCreates a translation matrix with the specified offset\n\n**Example:** `MoveMatrix(10, 0, 0) // Move 10 units along X`",
        "insertText": "MoveMatrix(${1})"
      },
      {
        "label": "PI",
        "kind": 21,
        "detail": "PI = 3.141592653589793",
        "documentation": "Mathematical constant π (pi) ≈ 3.14159\n\n**Example:** `sin(PI/2)           // Returns 1.0`"
      },
      {
        "label": "E",
        "kind": 21,
        "detail": "E = 2.718281828459045",
        "documentation": "Mathematical constant e (Euler's number) ≈ 2.71828\n\n**Example:** `pow(E, 1)           // Returns E`"
      },
      {
        "label": "BLACK",
        "kind": 21,
        "detail": "BLACK = 0",
        "documentation": "C64 color constant for black\n\n**Example:** `lda #BLACK`"
      },
      {
        "label": "WHITE",
        "kind": 21,
        "detail": "WHITE = 1",
        "documentation": "C64 color constant for white\n\n**Example:** `lda #WHITE`"
      },
      {
        "label": "RED",
        "kind": 21,
        "detail": "RED = 2",
        "documentation": "C64 color constant for red\n\n**Example:** `lda #RED`"
      },
      {
        "label": "CYAN",
        "kind": 21,
        "detail": "CYAN = 3",
        "documentation": "C64 color constant for cyan\n\n**Example:** `lda #CYAN`"
      },
      {
        "label": "PURPLE",
        "kind": 21,
        "detail": "PURPLE = 4",
        "documentation": "C64 color constant for purple\n\n**Example:** `lda #PURPLE`"
      },
      {
        "label": "GREEN",
        "kind": 21,
        "detail": "GREEN = 5",
        "documentation": "C64 color constant for green\n\n**Example:** `lda #GREEN`"
      },
      {
        "label": "BLUE",
        "kind": 21,
        "detail": "BLUE = 6",
        "documentation": "C64 color constant for blue\n\n**Example:** `lda #BLUE`"
      },
      {
        "label": "YELLOW",
        "kind": 21,
        "detail": "YELLOW = 7",
        "documentation": "C64 color constant for yellow\n\n**Example:** `lda #YELLOW`"
      },
      {
        "label": "ORANGE",
        "kind": 21,
        "detail": "ORANGE = 8",
        "documentation": "C64 color constant for orange\n\n**Example:** `lda #ORANGE`"
      },
      {
        "label": "BROWN",
        "kind": 21,
        "detail": "BROWN = 9",
        "documentation": "C64 color constant for brown\n\n**Example:** `lda #BROWN`"
      },
      {
        "label": "LIGHT_RED",
        "kind": 21,
        "detail": "LIGHT_RED = 10",
        "documentation": "C64 color constant for light red\n\n**Example:** `lda #LIGHT_RED`"
      },
      {
        "label": "DARK_GRAY",
        "kind": 21,
        "detail": "DARK_GRAY = 11",
        "documentation": "C64 color constant for dark gray\n\n**Example:** `lda #DARK_GRAY`"
      },
      {
        "label": "GRAY",
        "kind": 21,
        "detail": "GRAY = 12",
        "documentation": "C64 color constant for gray\n\n**Example:** `lda #GRAY`"
      },
      {
        "label": "LIGHT_GREEN",
        "kind": 21,
        "detail": "LIGHT_GREEN = 13",
        "documentation": "C64 color constant for light green\n\n**Example:** `lda #LIGHT_GREEN`"
      },
      {
        "label": "LIGHT_BLUE",
        "kind": 21,
        "detail": "LIGHT_BLUE = 14",
        "documentation": "C64 color constant for light blue\n\n**Example:** `lda #LIGHT_BLUE`"
      },
      {
        "label": "LIGHT_GRAY",
        "kind": 21,
        "detail": "LIGHT_GRAY = 15",
        "documentation": "C64 color constant for light gray\n\n**Example:** `lda #LIGHT_GRAY`"
      }
    ]
  }
]