2025/10/01 11:25:44 log.go:67: [INFO] Logger initialized at /Users/Ronald.Funk/.local/share/6510lsp/log/6510lsp.log
2025/10/01 11:25:44 main.go:51: [INFO] C64 Language Server started.
2025/10/01 11:25:44 server.go:533: [INFO] LSP server starting...
2025/10/01 11:25:44 server.go:548: [INFO] Using configuration directory: /Users/Ronald.Funk/.config/6510lsp
2025/10/01 11:25:44 server.go:437: [DEBUG] Analysis worker started
2025/10/01 11:25:44 server.go:596: [INFO] Successfully loaded 27 built-in functions and 18 built-in constants from /Users/Ronald.Funk/.config/6510lsp/kickass.json
2025/10/01 11:25:44 server.go:581: [INFO] Successfully loaded C64 memory map with 21 regions from /Users/Ronald.Funk/.config/6510lsp/c64memory.json
2025/10/01 11:25:44 server.go:565: [INFO] Successfully loaded mnemonics from /Users/Ronald.Funk/.config/6510lsp/mnemonic.json
2025/10/01 11:25:44 server.go:605: [INFO] All JSON Source of Truth files loaded successfully from /Users/Ronald.Funk/.config/6510lsp
2025/10/01 11:25:44 lexer.go:248: [DEBUG] Loaded mnemonics: 45 std, 11 ctrl, 46 illegal
2025/10/01 11:25:44 lexer.go:412: [DEBUG] Loaded directives: 2 pre, 2 flow, 15 asm, 7 data, 1 text
2025/10/01 11:25:44 lexer.go:413: [DEBUG] Loaded functions: 15 math, 3 string, 4 file, 5 3d
2025/10/01 11:25:44 lexer.go:414: [DEBUG] Loaded constants: 2 math, 16 color
2025/10/01 11:25:44 server.go:648: Received payload: {"id":1,"params":{"trace":"off","capabilities":{"textDocument":{"documentSymbol":{"tagSupport":{"valueSet":[1]},"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true,"dynamicRegistration":false},"declaration":{"linkSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"rangesSupport":true,"dynamicRegistration":true},"colorProvider":{"dynamicRegistration":true},"selectionRange":{"dynamicRegistration":false},"linkedEditingRange":{"dynamicRegistration":false},"completion":{"completionList":{"itemDefaults":["editRange","insertTextFormat","insertTextMode","data"]},"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":false,"preselectSupport":false,"deprecatedSupport":true,"documentationFormat":["markdown","plaintext"],"resolveSupport":{"properties":["additionalTextEdits","command"]},"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"dynamicRegistration":false},"references":{"dynamicRegistration":false},"implementation":{"linkSupport":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["textEdits","tooltip","location","command"]}},"hover":{"contentFormat":["markdown","plaintext"],"dynamicRegistration":true},"semanticTokens":{"overlappingTokenSupport":true,"multilineTokenSupport":true,"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"augmentsSyntaxTokens":true,"dynamicRegistration":false,"requests":{"full":{"delta":true},"range":false},"formats":["relative"],"serverCancelSupport":false,"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"]},"foldingRange":{"lineFoldingOnly":true,"foldingRangeKind":{"valueSet":["comment","imports","region"]},"dynamicRegistration":false,"foldingRange":{"collapsedText":true}},"diagnostic":{"tagSupport":{"valueSet":[1,2]},"dataSupport":true,"relatedDocumentSupport":true,"relatedInformation":true,"dynamicRegistration":false},"synchronization":{"dynamicRegistration":false,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"callHierarchy":{"dynamicRegistration":false},"inlineCompletion":{"dynamicRegistration":false},"typeDefinition":{"linkSupport":true},"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dataSupport":true,"isPreferredSupport":true,"disabledSupport":true,"resolveSupport":{"properties":["edit","command"]},"honorsChangeAnnotations":true,"dynamicRegistration":true},"signatureHelp":{"signatureInformation":{"noActiveParameterSupport":true,"parameterInformation":{"labelOffsetSupport":true},"documentationFormat":["markdown","plaintext"],"activeParameterSupport":true},"dynamicRegistration":false},"definition":{"linkSupport":true,"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":false},"rename":{"honorsChangeAnnotations":true,"prepareSupport":true,"dynamicRegistration":true},"publishDiagnostics":{"tagSupport":{"valueSet":[1,2]},"dataSupport":true,"relatedInformation":true},"codeLens":{"dynamicRegistration":false,"resolveSupport":{"properties":["command"]}},"documentHighlight":{"dynamicRegistration":false}},"general":{"positionEncodings":["utf-8","utf-16","utf-32"]},"workspace":{"semanticTokens":{"refreshSupport":true},"didChangeWatchedFiles":{"relativePatternSupport":true,"dynamicRegistration":true},"symbol":{"dynamicRegistration":false,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"didChangeConfiguration":{"dynamicRegistration":false},"workspace":{"refreshSupport":false},"configuration":true,"inlayHint":{"refreshSupport":true},"workspaceFolders":true,"applyEdit":true,"workspaceEdit":{"resourceOperations":["rename","create","delete"],"normalizesLineEndings":true,"changeAnnotationSupport":{"groupsOnLabel":true}}},"window":{"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"workDoneProgress":true,"showDocument":{"support":true}}},"rootPath":"/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim","clientInfo":{"version":"0.12.0-dev+Homebrew","name":"Neovim"},"processId":24106,"workDoneToken":"1","workspaceFolders":[{"name":"/Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim","uri":"file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim"}],"rootUri":"file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim"},"jsonrpc":"2.0","method":"initialize"}
2025/10/01 11:25:44 server.go:664: [DEBUG] Handling initialize request.
2025/10/01 11:25:44 server.go:1188: Sending response: {"id":1,"jsonrpc":"2.0","result":{"capabilities":{"completionProvider":{"resolveProvider":false,"triggerCharacters":[" ",".","$"]},"definitionProvider":true,"documentSymbolProvider":true,"hoverProvider":true,"referencesProvider":true,"semanticTokensProvider":{"full":true,"legend":{"tokenModifiers":["declaration","readonly"],"tokenTypes":["keyword","variable","function","macro","pseudocommand","number","comment","string","operator"]}},"textDocumentSync":{"change":1,"openClose":true},"workspace":{"workspaceFolders":{"supported":true}}},"serverInfo":{"name":"6510lsp_server","version":"0.9.4"}}}
2025/10/01 11:25:44 server.go:648: Received payload: {"jsonrpc":"2.0","params":{},"method":"initialized"}
2025/10/01 11:25:44 server.go:708: [DEBUG] Handling initialized notification.
2025/10/01 11:25:44 server.go:648: Received payload: {"jsonrpc":"2.0","params":{"settings":{"6510lsp":{"deadCodeDetection":{"showWarnings":true,"enabled":true},"styleGuideEnforcement":{"showHints":false,"upperCaseConstants":false,"enabled":false,"descriptiveLabels":false},"warnUnusedLabels":false,"zeroPageOptimization":{"enabled":true,"showHints":true},"branchDistanceValidation":{"showWarnings":true,"enabled":true},"illegalOpcodeDetection":{"showWarnings":true,"enabled":true},"hardwareBugDetection":{"jmpIndirectBug":true,"showWarnings":true,"enabled":true},"memoryLayoutAnalysis":{"showStackWarnings":true,"showROMWriteWarnings":true,"enabled":true,"showIOAccess":true},"magicNumberDetection":{"showHints":true,"enabled":true,"c64Addresses":true}}}},"method":"workspace/didChangeConfiguration"}
2025/10/01 11:25:44 server.go:722: [DEBUG] Handling workspace/didChangeConfiguration notification.
2025/10/01 11:25:44 server.go:727: [DEBUG] Updating LSP configuration
2025/10/01 11:25:44 server.go:333: [DEBUG] LSP Configuration updated
2025/10/01 11:25:44 server.go:745: [INFO] Configuration updated and documents re-analyzed
2025/10/01 11:25:44 server.go:648: Received payload: {"jsonrpc":"2.0","params":{"textDocument":{"text":"// Comprehensive Kick Assembler Test File\n// Tests both Phase 1 new features and existing functionality\n\n// =============================================================================\n// PHASE 1 NEW FEATURES TESTING\n// =============================================================================\n\n// Enhanced Arithmetic Expression Evaluation\n.const base_addr = $1000\n.const offset = $20\n.const size = 8\n\n// Test complex arithmetic expressions\n.const total = base_addr + offset                    // Simple addition\n.const doubled = total * 2                          // Multiplication\n.const shifted_left = doubled << 1                  // Left shift\n.const shifted_right = shifted_left >> 2            // Right shift\n.const masked = shifted_right & $FF                 // Bitwise AND\n.const combined = masked | $0F                      // Bitwise OR\n.const xored = combined ^ $AA                       // Bitwise XOR\n.const modulo = xored % 16                          // Modulo operation\n\n// Test grouped expressions with parentheses\n.const complex = (base_addr + offset) * (size - 2)\n.const nested = ((total + 10) * 3) & $FF00\n.const priority = base_addr + (offset * size) - 1\n\n// Test builtin function validation (should work correctly)\n.const absolute = abs(-42)                         // Valid: 1 parameter\n.const minimum = min(10, 20)                       // Valid: 2 parameters\n.const maximum = max(5, 15)                        // Valid: 2 parameters\n.const floored = floor(3.7)                        // Valid: 1 parameter\n\n// Test invalid builtin function calls (should generate warnings)\n.const invalid_abs = abs()                        // Invalid: 0 parameters\n.const invalid_min = min(10)                      // Invalid: 1 parameter\n.const invalid_max = max(1, 2, 3)                 // Invalid: 3 parameters\n\n// =============================================================================\n// PHASE 2 NEW FEATURES TESTING\n// =============================================================================\n\n// Enhanced .for Directive Processing with Scope Management\n.const loop_base = $2000\n.const test_before_48 = $BUGI\n\n// Simple .for loop with scoped variables\n.for (var i = 0; i < 8; i++) {\n    .byte i                                         // i is accessible here\n    .word loop_base + i\n}\n\n.const test_after_48 = $BUGI\n\n// Nested .for loops with proper scope isolation\n.for (var x = 0; x < 4; x++) {\n    .for (var y = 0; y < 3; y++) {\n        .byte x, y                                  // Both x and y accessible\n        .word (x * 16) + y\n    }\n}\n\n// Complex .for loop with expressions\n.for (var addr = loop_base; addr < loop_base + $100; addr += $10) {\n    .byte <addr, >addr                              // addr accessible in scope\n}\n\n// Conditional Directive Analysis with Dead Code Detection\n.const debug_mode = 1\n.const release_build = 0\n\n// Basic conditional compilation\n.if (debug_mode) {\n    .byte $DE, $BU, $G1                            // Debug code\n    lda #$ff\n    sta $d020\n} else {\n    .byte $RE, $LE, $AS                            // Release code\n    lda #$00\n    sta $d020\n}\n\n// Dead code detection - this should be flagged\n.if (0) {\n    .byte $DE, $AD, $C0, $DE                       // Dead code - never executed\n    lda #$dead\n    sta $beef\n}\n\n// Nested conditionals with complex logic\n.if (debug_mode) {\n    .if (release_build) {\n        .byte $NE, $VE, $R1                        // Dead: debug_mode=1 AND release_build=0\n    } else {\n        .byte $DE, $BU, $G2                        // Live: debug_mode=1 AND NOT release_build\n    }\n}\n\n// .ifdef and .ifndef directives\n.ifdef debug_mode {\n    .text \"Debug mode active\"\n}\n\n.ifndef undefined_symbol {\n    .text \"Symbol not defined\"\n}\n\n// Type System Integration - Enhanced Validation\n.const valid_byte = $FF\n.const invalid_byte = $1FF                         // Should warn: > 255\n.const valid_word = $FFFF\n.const invalid_word = $10000                       // Should warn: > 65535\n\n// Zero-page optimization hints\n.const zero_page_addr = $00FF\n.const non_zero_page = $0200\n\nzero_page_test:\n    lda $00FF        // Should suggest zero page optimization\n    sta $0055        // Should suggest zero page optimization\n\n// Range validation in different contexts\n.byte $00, $FF, $100                               // Should warn: $100 > byte range\n.word $0000, $FFFF, $10000                         // Should warn: $10000 > word range\n\n// Function parameter type validation\n.const valid_abs = abs(-100)                       // Valid: number parameter\n.const valid_min = min($FF, $80)                   // Valid: two numbers\n//.const invalid_abs_type = abs(\"text\")             // Invalid: string parameter\n//.const invalid_min_type = min($FF, \"text\")        // Invalid: mixed types\n\n// String validation with escape sequences\n.text \"Valid string\"\n//.text \"Invalid \\x escape\"                        // Invalid escape sequence\n\n// Performance Analysis - Complex Loop Detection\n.for (var outer = 0; outer < 10; outer++) {\n    .for (var inner = 0; inner < 100; inner++) {   // Should warn: O(n²) complexity\n        .byte outer * inner\n    }\n}\n\n// =============================================================================\n// EXISTING FEATURES TESTING\n// =============================================================================\n\n// Standard directives\n.pc = $0801 \"Basic Upstart\"\n.const screen = $0400\n.const border = $d020\n.const background = $d021\n\n// Labels and symbol resolution\nstart:\n    sei\n\n    // Test memory address completion ($D020, $D021, etc.)\n    lda #$01\n    sta $d020        // Should offer memory address completion\n\n    // Test mnemonic completion after label\n    inc $d021        // Should offer mnemonic completion\n\n    // Test immediate addressing context\n    lda #total       // Should offer constants, not memory addresses\n    ldx #<screen     // Low byte operator\n    ldy #>screen     // High byte operator\n\n    // Test illegal opcodes (should show warnings)\n    nop\n    dcp $ff          // Illegal opcode - should show warning\n\nmain_loop:\n    // Test branch instructions with labels\n    jmp main_loop    // Should resolve label correctly\n    bne start        // Should resolve label correctly\n\n    // Test macro/function calls (if any defined)\n    jsr subroutine\n\n    rts\n\n// Subroutine for testing symbol resolution\nsubroutine:\n    pha\n\n    // Test directive processing\n    .for (var i = 0; i < 8; i++) {\n        .byte i * 2\n    }\n\n    // Test conditional directives\n    .if (total > $1000) {\n        lda #$ff\n    } else {\n        lda #$00\n    }\n\n    pla\n    rts\n\n// Data section\ndata_section:\n    .byte $01, $02, $03, $04\n    .word start, main_loop, subroutine\n    .text \"Hello, World!\"\n\n// Test variables and constants\n.var counter = 0\n.const max_items = 256\n\n// Advanced directive testing\n.macro SetBorderColor(color) {\n    lda #color\n    sta $d020\n}\n\n// Test macro usage\nborder_setup:\n    :SetBorderColor($02)  // Should validate macro parameters\n    rts\n\n// =============================================================================\n// COMPLETION CONTEXT TESTING\n// =============================================================================\n\ncontext_test:\n    // After label: should offer mnemonics\n\n    // After mnemonic + space: should NOT offer mnemonics\n    lda             // Cursor here should offer addressing modes, not mnemonics\n\n    // After #: should offer constants and builtin functions\n    lda #           // Should offer: total, base_addr, abs, min, max, etc.\n\n    // After $: should offer memory addresses\n    sta $           // Should offer: $D020, $D021, etc.\n\n    // In expressions: should offer appropriate symbols\n    .const test = base_addr +    // Should offer constants and identifiers\n\n    rts\n\n// =============================================================================\n// ERROR DETECTION TESTING\n// =============================================================================\n\nerror_test:\n    // These should generate appropriate diagnostics:\n\n    // Undefined symbol\n    //lda undefined_symbol\n\n    // Invalid memory address\n    //sta $10000  // Beyond 16-bit range\n\n    // Division by zero in expressions\n    //.const invalid = total / 0\n\n    // Invalid directive usage\n    //.invalid_directive\n\n    rts\n\n// =============================================================================\n// PERFORMANCE TESTING SECTION\n// =============================================================================\n\nperformance_test:\n    // Large data block for performance testing\n    .fill 1000, i\n\n    // Many labels for symbol table testing\n    label_001: nop\n    label_002: nop\n    label_003: nop\n    label_004: nop\n    label_005: nop\n    // ... (would continue for stress testing)\n\n    rts\n\n// =============================================================================\n// HOVER INFORMATION TESTING\n// =============================================================================\n\nhover_test:\n    // Hovering over these should show useful information:\n    lda #total       // Should show calculated value\n    sta border       // Should show address and description\n    jsr subroutine   // Should show symbol information\n\n    // Hover over builtin functions should show signature\n    .const test_abs = abs(-100)    // Should show function signature\n\n    rts\n\n// End of file - cursor at end should offer global completions\n","languageId":"6510","version":0,"uri":"file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm"}},"method":"textDocument/didOpen"}
2025/10/01 11:25:44 server.go:752: [DEBUG] Handling textDocument/didOpen notification.
2025/10/01 11:25:44 server.go:760: [INFO] Stored document file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm
2025/10/01 11:25:44 server.go:480: [DEBUG] Queued analysis job for file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm
2025/10/01 11:25:44 server.go:392: [DEBUG] Cache miss for document file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm - parsing
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Comprehensive Kick Assembler Test File' at 1:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Tests both Phase 1 new features and existing functionality' at 2:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 4:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// PHASE 1 NEW FEATURES TESTING' at 5:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 6:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Enhanced Arithmetic Expression Evaluation' at 8:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 9:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1000' for input starting with '$' at 9:20
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1000' at 9:20
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 10:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$20' for input starting with '$' at 10:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$20' at 10:17
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 11:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test complex arithmetic expressions' at 13:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 14:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Simple addition' at 14:54
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 15:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Multiplication' at 15:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 16:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LEFT_SHIFT '<<' at 16:31
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_DEC '1' at 16:34
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Left shift' at 16:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 17:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token RIGHT_SHIFT '>>' at 17:37
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_DEC '2' at 17:40
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Right shift' at 17:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 18:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 18:33
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 18:33
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token BITWISE_AND '&' at 18:31
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FF' at 18:33
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Bitwise AND' at 18:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 19:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0F' for input starting with '$' at 19:28
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0F' at 19:28
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token BITWISE_OR '|' at 19:26
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$0F' at 19:28
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Bitwise OR' at 19:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 20:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$AA' for input starting with '$' at 20:27
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$AA' at 20:27
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token BITWISE_XOR '^' at 20:25
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$AA' at 20:27
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Bitwise XOR' at 20:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 21:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MODULO '%' at 21:23
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_DEC '16' at 21:25
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Modulo operation' at 21:53
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test grouped expressions with parentheses' at 23:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 24:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 25:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF00' for input starting with '$' at 25:38
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF00' at 25:38
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token BITWISE_AND '&' at 25:36
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FF00' at 25:38
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 26:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test builtin function validation (should work correctly)' at 28:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 29:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 1 parameter' at 29:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 30:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 2 parameters' at 30:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 31:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 2 parameters' at 31:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 32:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 1 parameter' at 32:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test invalid builtin function calls (should generate warnings)' at 34:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 35:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid: 0 parameters' at 35:51
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 36:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid: 1 parameter' at 36:51
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 37:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid: 3 parameters' at 37:51
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 39:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// PHASE 2 NEW FEATURES TESTING' at 40:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 41:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Enhanced .for Directive Processing with Scope Management' at 43:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 44:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$2000' for input starting with '$' at 44:20
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$2000' at 44:20
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 45:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BUGI' for input starting with '$' at 45:25
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Simple .for loop with scoped variables' at 47:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.for' at 48:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'test_after_48' at 53:8
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BUGI' for input starting with '$' at 53:24
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Nested .for loops with proper scope isolation' at 55:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.for' at 56:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$100' for input starting with '$' at 64:48
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$100' at 64:48
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10' for input starting with '$' at 64:62
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10' at 64:62
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 74:11
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 74:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BU' for input starting with '$' at 74:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$G1' for input starting with '$' at 74:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$ff' at 75:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 76:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 76:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$RE' for input starting with '$' at 78:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$LE' for input starting with '$' at 78:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$AS' for input starting with '$' at 78:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$00' at 79:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 80:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 80:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.if' at 84:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 85:11
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 85:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$AD' for input starting with '$' at 85:16
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$AD' at 85:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$C0' for input starting with '$' at 85:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$C0' at 85:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 85:26
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 85:26
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$dead' at 86:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$beef' for input starting with '$' at 87:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$beef' at 87:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.if' at 91:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$NE' for input starting with '$' at 93:15
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$VE' for input starting with '$' at 93:20
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$R1' for input starting with '$' at 93:25
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 95:15
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 95:15
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BU' for input starting with '$' at 95:20
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$G2' for input starting with '$' at 95:25
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// .ifdef and .ifndef directives' at 99:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DOT '.' at 100:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'ifndef' at 104:2
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'undefined_symbol' at 104:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LBRACE '{' at 104:26
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_TEXT '.text' at 105:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token RBRACE '}' at 106:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Type System Integration - Enhanced Validation' at 108:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 109:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 109:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 109:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 110:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1FF' for input starting with '$' at 110:23
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1FF' at 110:23
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: > 255' at 110:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 111:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FFFF' for input starting with '$' at 111:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FFFF' at 111:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 112:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10000' for input starting with '$' at 112:23
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10000' at 112:23
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: > 65535' at 112:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Zero-page optimization hints' at 114:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 115:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00FF' for input starting with '$' at 115:25
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00FF' at 115:25
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 116:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0200' for input starting with '$' at 116:24
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0200' at 116:24
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'zero_page_test:' at 118:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00FF' for input starting with '$' at 119:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00FF' at 119:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 119:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should suggest zero page optimization' at 119:22
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0055' for input starting with '$' at 120:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0055' at 120:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 120:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should suggest zero page optimization' at 120:22
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Range validation in different contexts' at 122:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00' for input starting with '$' at 123:7
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00' at 123:7
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.byte' at 123:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 123:12
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 123:12
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 123:10
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FF' at 123:12
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$100' for input starting with '$' at 123:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$100' at 123:17
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 123:15
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$100' at 123:17
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: $100 > byte range' at 123:52
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0000' for input starting with '$' at 124:7
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0000' at 124:7
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.word' at 124:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FFFF' for input starting with '$' at 124:14
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FFFF' at 124:14
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 124:12
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FFFF' at 124:14
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10000' for input starting with '$' at 124:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10000' at 124:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 124:19
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$10000' at 124:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: $10000 > word range' at 124:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Function parameter type validation' at 126:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 127:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: number parameter' at 127:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 128:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 128:24
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 128:24
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$80' for input starting with '$' at 128:29
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$80' at 128:29
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: two numbers' at 128:52
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.const invalid_abs_type = abs("text")             // Invalid: string parameter' at 129:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.const invalid_min_type = min($FF, "text")        // Invalid: mixed types' at 130:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// String validation with escape sequences' at 132:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_TEXT '.text' at 133:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.text "Invalid \x escape"                        // Invalid escape sequence' at 134:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Performance Analysis - Complex Loop Detection' at 136:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.for' at 137:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0801' for input starting with '$' at 148:7
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0801' at 148:7
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0400' for input starting with '$' at 149:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0400' at 149:17
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 150:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 150:17
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d021' for input starting with '$' at 151:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d021' at 151:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$01' at 158:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 159:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 159:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d021' for input starting with '$' at 162:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d021' at 162:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 165:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 166:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 167:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$ff' for input starting with '$' at 171:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$ff' at 171:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1000' for input starting with '$' at 193:18
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1000' at 193:18
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$ff' at 194:13
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LBRACE '{' at 195:12
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$00' at 196:13
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 196:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token RBRACE '}' at 197:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'pla' at 199:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 200:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Data section' at 202:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'data_section:' at 203:1
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$01' for input starting with '$' at 204:11
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$01' at 204:11
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.byte' at 204:5
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$02' for input starting with '$' at 204:16
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$02' at 204:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 204:14
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$02' at 204:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$03' for input starting with '$' at 204:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$03' at 204:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 204:19
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$03' at 204:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$04' for input starting with '$' at 204:26
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$04' at 204:26
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 204:24
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$04' at 204:26
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.word' at 205:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 205:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'main_loop' at 205:18
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 205:27
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'subroutine' at 205:29
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_TEXT '.text' at 206:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test variables and constants' at 208:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.var' at 209:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 210:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Advanced directive testing' at 212:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_ASM '.macro' at 213:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LPAREN '(' at 213:22
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'color' at 213:23
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token RPAREN ')' at 213:28
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LBRACE '{' at 213:30
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 214:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 214:5
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 215:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 215:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 215:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token RBRACE '}' at 216:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test macro usage' at 218:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'border_setup:' at 219:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COLON ':' at 220:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'SetBorderColor' at 220:6
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$02' for input starting with '$' at 220:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$02' at 220:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should validate macro parameters' at 220:27
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 221:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 223:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// COMPLETION CONTEXT TESTING' at 224:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 225:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'context_test:' at 227:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After label: should offer mnemonics' at 228:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After mnemonic + space: should NOT offer mnemonics' at 230:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 231:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Cursor here should offer addressing modes, not mnemonics' at 231:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After #: should offer constants and builtin functions' at 233:5
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 234:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 234:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After $: should offer memory addresses' at 236:5
2025/10/01 11:25:44 lexer.go:632: [WARN] Illegal character found at 237:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 237:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should offer: $D020, $D021, etc.' at 237:21
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// In expressions: should offer appropriate symbols' at 239:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 240:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 242:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 244:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// ERROR DETECTION TESTING' at 245:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 246:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'error_test:' at 248:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// These should generate appropriate diagnostics:' at 249:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Undefined symbol' at 251:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//lda undefined_symbol' at 252:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid memory address' at 254:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//sta $10000  // Beyond 16-bit range' at 255:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Division by zero in expressions' at 257:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.const invalid = total / 0' at 258:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid directive usage' at 260:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.invalid_directive' at 261:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 263:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 265:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// PERFORMANCE TESTING SECTION' at 266:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 267:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'performance_test:' at 269:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Large data block for performance testing' at 270:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.fill' at 271:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 271:15
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'i' at 271:17
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Many labels for symbol table testing' at 273:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_001:' at 274:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 274:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_002:' at 275:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 275:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_003:' at 276:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 276:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_004:' at 277:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 277:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_005:' at 278:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 278:16
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// ... (would continue for stress testing)' at 279:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 281:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 283:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// HOVER INFORMATION TESTING' at 284:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 285:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token LABEL 'hover_test:' at 287:1
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Hovering over these should show useful information:' at 288:5
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 289:9
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 289:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show calculated value' at 289:22
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 290:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show address and description' at 290:22
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'jsr' at 291:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show symbol information' at 291:22
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Hover over builtin functions should show signature' at 293:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 294:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show function signature' at 294:36
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 296:5
2025/10/01 11:25:44 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// End of file - cursor at end should offer global completions' at 298:1
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'base_addr'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'base_addr' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'offset'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'offset' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'size'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'size' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'total'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'total' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'doubled'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'doubled' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'shifted_left'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'shifted_left' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'shifted_right'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'shifted_right' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'masked'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'masked' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'combined'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'combined' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'xored'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'xored' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'modulo'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'modulo' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'complex'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'complex' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'nested'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'nested' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'priority'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'priority' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'absolute'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'absolute' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'minimum'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'minimum' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'maximum'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'maximum' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'floored'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'floored' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_abs'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'invalid_abs' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_min'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'invalid_min' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_max'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'invalid_max' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'loop_base'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'loop_base' to scope 'root'
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_byte'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'valid_byte' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_byte'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'invalid_byte' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_word'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'valid_word' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_word'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'invalid_word' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'zero_page_addr'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'zero_page_addr' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'non_zero_page'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'non_zero_page' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'zero_page_test' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_abs'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'valid_abs' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_min'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'valid_min' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'data_section' to scope 'root'
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.var' with name 'counter'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'counter' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'max_items'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'max_items' to scope 'root'
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'border_setup' to scope 'root'
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'context_test' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'test'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'test' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'error_test' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'performance_test' to scope 'root'
2025/10/01 11:25:44 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'label_001' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'label_002' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'label_003' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'label_004' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'label_005' to scope 'root'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'hover_test' to scope 'root'
2025/10/01 11:25:44 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'test_abs'
2025/10/01 11:25:44 symbol.go:99: [DEBUG] Adding symbol 'test_abs' to scope 'root'
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=base_addr
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=base_addr, addr=4096
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=offset
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=offset, addr=32
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=size
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=size, addr=8
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=total
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=total, addr=4128
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=doubled
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=doubled, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_left
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=shifted_left, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_right
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=shifted_right, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=masked
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=masked, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=combined
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=combined, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=xored
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=xored, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=modulo
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=modulo, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=complex
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=complex, addr=24768
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=nested
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=nested, addr=12414
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=priority
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=priority, addr=4351
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=absolute
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=absolute, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for absolute
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=minimum
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=minimum, addr=10
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=maximum
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=maximum, addr=15
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=floored
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=floored, addr=3
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_abs
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_abs, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_abs
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_min
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_min, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_min
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_max
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_max, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_max
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=loop_base
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=loop_base, addr=8192
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_before_48
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=loop_base
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=x
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.InfixExpression, value=&{Token:{Type:PLUS Literal:+ Line:59 Column:24} Left:0x14000193020 Operator:+ Right:0x140001bb640}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=-1, range=0-65535
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.PrefixExpression, value=&{Token:{Type:LESS Literal:< Line:65 Column:11} Operator:< Right:0x140001bb780}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=-1, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=debug_mode
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=debug_mode, addr=1
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=release_build
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=release_build, addr=0
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:74 Column:11} Value:222}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:85 Column:11} Value:222}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:95 Column:15} Value:222}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.ifdef, name=debug_mode
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_byte
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_byte, addr=255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_byte
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_byte, addr=511
2025/10/01 11:25:44 analyze.go:696: [DEBUG] processDirective .const: ADDING BYTE WARNING for invalid_byte, addr=511
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_word
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_word, addr=65535
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_word
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_word, addr=65536
2025/10/01 11:25:44 analyze.go:699: [DEBUG] processDirective .const: ADDING WORD WARNING for invalid_word, addr=65536
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=zero_page_addr
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=zero_page_addr, addr=255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=non_zero_page
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=non_zero_page, addr=512
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$00 Line:123 Column:7} Value:0}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=0, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$0000 Line:124 Column:7} Value:0}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=0, range=0-65535
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_abs
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_abs, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for valid_abs
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_min
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_min, addr=128
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=outer
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=screen
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=screen, addr=1024
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=border
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=border, addr=53280
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=background
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=background, addr=53281
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=INC, token=inc
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDX, token=ldx
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDY, token=ldy
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=DCP, token=dcp
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=JMP, token=jmp
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=BNE, token=bne
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=JSR, token=jsr
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$01 Line:204 Column:11} Value:1}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=1, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=start
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.var, name=counter
2025/10/01 11:25:44 analyze.go:720: [DEBUG] processDirective .const: name=counter, addr=0
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=max_items
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=max_items, addr=256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.macro, name=SetBorderColor
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=test, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.fill, name=.fill
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:44 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=JSR, token=jsr
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_abs
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=test_abs, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test_abs
2025/10/01 11:25:44 analyze.go:1747: [DEBUG] performTokenLevelRangeValidation: starting token-level analysis
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 49: .byte i                                         // i is accessible here
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'i' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'i'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 50: .word loop_base + i
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'loop_base + i' in word directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'loop_base + i'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 58: .byte x, y                                  // Both x and y accessible
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'x' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'x'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'y' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'y'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 59: .word (x * 16) + y
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '(x * 16) + y' in word directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '(x * 16) + y'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 65: .byte <addr, >addr                              // addr accessible in scope
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '<addr' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '<addr'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '>addr' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '>addr'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 74: .byte $DE, $BU, $G1                            // Debug code
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$BU' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$BU'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$G1' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$G1'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 78: .byte $RE, $LE, $AS                            // Release code
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$RE' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$RE'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$LE' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$LE'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$AS' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$AS'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 85: .byte $DE, $AD, $C0, $DE                       // Dead code - never executed
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$AD' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$C0' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 93: .byte $NE, $VE, $R1                        // Dead: debug_mode=1 AND release_build=0
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$NE' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$NE'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$VE' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$VE'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$R1' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$R1'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 95: .byte $DE, $BU, $G2                        // Live: debug_mode=1 AND NOT release_build
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$BU' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$BU'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$G2' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$G2'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 123: .byte $00, $FF, $100                               // Should warn: $100 > byte range
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$00' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$FF' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$100' in byte directive
2025/10/01 11:25:44 analyze.go:1809: [DEBUG] validateTokenLevelDataDirective: ADDING WARNING for value 256 out of range
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 124: .word $0000, $FFFF, $10000                         // Should warn: $10000 > word range
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$0000' in word directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$FFFF' in word directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$10000' in word directive
2025/10/01 11:25:44 analyze.go:1809: [DEBUG] validateTokenLevelDataDirective: ADDING WARNING for value 65536 out of range
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 139: .byte outer * inner
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'outer * inner' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'outer * inner'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 189: .byte i * 2
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'i * 2' in byte directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'i * 2'
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 204: .byte $01, $02, $03, $04
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$01' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$02' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$03' in byte directive
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$04' in byte directive
2025/10/01 11:25:44 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 205: .word start, main_loop, subroutine
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'start' in word directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'start'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'main_loop' in word directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'main_loop'
2025/10/01 11:25:44 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'subroutine' in word directive
2025/10/01 11:25:44 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'subroutine'
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=base_addr
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=base_addr, addr=4096
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=offset
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=offset, addr=32
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=size
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=size, addr=8
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=total
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=total, addr=4128
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=doubled
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=doubled, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_left
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=shifted_left, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_right
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=shifted_right, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=masked
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=masked, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=combined
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=combined, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=xored
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=xored, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=modulo
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=modulo, addr=8256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=complex
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=complex, addr=24768
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=nested
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=nested, addr=12414
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=priority
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=priority, addr=4351
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=absolute
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=absolute, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for absolute
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=minimum
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=minimum, addr=10
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=maximum
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=maximum, addr=15
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=floored
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=floored, addr=3
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_abs
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_abs, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_abs
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_min
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_min, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_min
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_max
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_max, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_max
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=loop_base
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=loop_base, addr=8192
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_before_48
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=loop_base
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=x
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.InfixExpression, value=&{Token:{Type:PLUS Literal:+ Line:59 Column:24} Left:0x14000193020 Operator:+ Right:0x140001bb640}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=-1, range=0-65535
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.PrefixExpression, value=&{Token:{Type:LESS Literal:< Line:65 Column:11} Operator:< Right:0x140001bb780}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=-1, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=debug_mode
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=debug_mode, addr=1
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=release_build
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=release_build, addr=0
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:74 Column:11} Value:222}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:85 Column:11} Value:222}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:95 Column:15} Value:222}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.ifdef, name=debug_mode
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_byte
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_byte, addr=255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_byte
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_byte, addr=511
2025/10/01 11:25:44 analyze.go:696: [DEBUG] processDirective .const: ADDING BYTE WARNING for invalid_byte, addr=511
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_word
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_word, addr=65535
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_word
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=invalid_word, addr=65536
2025/10/01 11:25:44 analyze.go:699: [DEBUG] processDirective .const: ADDING WORD WARNING for invalid_word, addr=65536
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=zero_page_addr
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=zero_page_addr, addr=255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=non_zero_page
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=non_zero_page, addr=512
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$00 Line:123 Column:7} Value:0}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=0, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$0000 Line:124 Column:7} Value:0}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=0, range=0-65535
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_abs
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_abs, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for valid_abs
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_min
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=valid_min, addr=128
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=outer
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:648: [DEBUG] processDirective: node is nil
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=screen
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=screen, addr=1024
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=border
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=border, addr=53280
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=background
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=background, addr=53281
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: SEI
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: INC
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDX
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDY
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: DCP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: JMP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: BNE
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: JSR
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: PHA
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: PLA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:44 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$01 Line:204 Column:11} Value:1}
2025/10/01 11:25:44 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=1, range=0-255
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.word, name=start
2025/10/01 11:25:44 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.var, name=counter
2025/10/01 11:25:44 analyze.go:720: [DEBUG] processDirective .const: name=counter, addr=0
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=max_items
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=max_items, addr=256
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.macro, name=SetBorderColor
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=test, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.fill, name=.fill
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: JSR
2025/10/01 11:25:44 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_abs
2025/10/01 11:25:44 analyze.go:688: [DEBUG] processDirective .const: name=test_abs, addr=-1
2025/10/01 11:25:44 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test_abs
2025/10/01 11:25:44 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:44 server.go:455: [INFO] Parsed document and updated symbol store for file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm
2025/10/01 11:25:44 server.go:1188: Sending response: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"message":"Illegal character sequence '$BUGI'","range":{"start":{"line":44,"character":24},"end":{"line":44,"character":29}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$BUGI'","range":{"start":{"line":52,"character":23},"end":{"line":52,"character":28}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$RE'","range":{"start":{"line":77,"character":10},"end":{"line":77,"character":13}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$NE'","range":{"start":{"line":92,"character":14},"end":{"line":92,"character":17}},"severity":1,"source":"parser"},{"message":"expected identifier, got '=' instead","range":{"start":{"line":147,"character":4},"end":{"line":147,"character":5}},"severity":1,"source":"parser"},{"message":"expected ')', got 1 instead","range":{"start":{"line":192,"character":15},"end":{"line":192,"character":16}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$'","range":{"start":{"line":236,"character":8},"end":{"line":236,"character":9}},"severity":1,"source":"parser"},{"message":"Invalid addressing mode 'Implied' for instruction 'LDA'","range":{"start":{"line":230,"character":4},"end":{"line":230,"character":8}},"severity":1,"source":"parser"},{"message":"Constant 'invalid_byte' value $1FF out of byte range ($0-$FF)","range":{"start":{"line":109,"character":0},"end":{"line":109,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Constant 'invalid_word' value $10000 out of word range ($0-$FFFF)","range":{"start":{"line":111,"character":0},"end":{"line":111,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Consider zero-page addressing for $FF (saves 1 byte, 1 cycle)","range":{"start":{"line":118,"character":4},"end":{"line":118,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider zero-page addressing for $55 (saves 1 byte, 1 cycle)","range":{"start":{"line":119,"character":4},"end":{"line":119,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Value $100 out of byte range ($0-$FF)","range":{"start":{"line":122,"character":16},"end":{"line":122,"character":17}},"severity":2,"source":"enhanced-analyzer"},{"message":"Value $10000 out of word range ($0-$FFFF)","range":{"start":{"line":123,"character":20},"end":{"line":123,"character":21}},"severity":2,"source":"enhanced-analyzer"},{"message":"Incorrect number of arguments for builtin function 'abs'. Expected 1, got 0","range":{"start":{"line":34,"character":21},"end":{"line":34,"character":22}},"severity":2,"source":"analyzer"},{"message":"Incorrect number of arguments for builtin function 'min'. Expected 2, got 1","range":{"start":{"line":35,"character":21},"end":{"line":35,"character":22}},"severity":2,"source":"analyzer"},{"message":"Incorrect number of arguments for builtin function 'max'. Expected 2, got 3","range":{"start":{"line":36,"character":21},"end":{"line":36,"character":22}},"severity":2,"source":"analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":75,"character":4},"end":{"line":75,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":75,"character":4},"end":{"line":75,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":79,"character":4},"end":{"line":79,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":79,"character":4},"end":{"line":79,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Consider defining constant for address $DEAD","range":{"start":{"line":85,"character":4},"end":{"line":85,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider defining constant for address $BEEF","range":{"start":{"line":86,"character":4},"end":{"line":86,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Constant 'invalid_byte' value $1FF out of byte range ($0-$FF)","range":{"start":{"line":109,"character":0},"end":{"line":109,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Constant 'invalid_word' value $10000 out of word range ($0-$FFFF)","range":{"start":{"line":111,"character":0},"end":{"line":111,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":158,"character":4},"end":{"line":158,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":158,"character":4},"end":{"line":158,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Background color register ($D021)","range":{"start":{"line":161,"character":4},"end":{"line":161,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D021 - ensure correct timing","range":{"start":{"line":161,"character":4},"end":{"line":161,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"'DCP' is an undocumented/illegal opcode - may not work on all systems","range":{"start":{"line":170,"character":4},"end":{"line":170,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Branch distance -183 out of range (-128 to +127)","range":{"start":{"line":175,"character":4},"end":{"line":175,"character":5}},"severity":1,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":214,"character":4},"end":{"line":214,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":214,"character":4},"end":{"line":214,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":289,"character":4},"end":{"line":289,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Unreachable code after unconditional jump","range":{"start":{"line":175,"character":4},"end":{"line":175,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Unreachable code after unconditional jump","range":{"start":{"line":178,"character":4},"end":{"line":178,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Unreachable code after unconditional jump","range":{"start":{"line":180,"character":4},"end":{"line":180,"character":5}},"severity":2,"source":"enhanced-analyzer"}],"uri":"file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm"}}
2025/10/01 11:25:44 server.go:648: Received payload: {"id":2,"params":{"textDocument":{"uri":"file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm"}},"jsonrpc":"2.0","method":"textDocument/semanticTokens/full"}
2025/10/01 11:25:44 server.go:1135: [DEBUG] Handling textDocument/semanticTokens/full request.
2025/10/01 11:25:44 semantic.go:10: [DEBUG] generateSemanticTokens: Generating tokens for URI: file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1000' for input starting with '$' at 9:20
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1000' at 9:20
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$20' for input starting with '$' at 10:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$20' at 10:17
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 18:33
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 18:33
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0F' for input starting with '$' at 19:28
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0F' at 19:28
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$AA' for input starting with '$' at 20:27
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$AA' at 20:27
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF00' for input starting with '$' at 25:38
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF00' at 25:38
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$2000' for input starting with '$' at 44:20
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$2000' at 44:20
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BUGI' for input starting with '$' at 45:25
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BUGI' for input starting with '$' at 53:24
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$100' for input starting with '$' at 64:48
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$100' at 64:48
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10' for input starting with '$' at 64:62
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10' at 64:62
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 74:11
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 74:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BU' for input starting with '$' at 74:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$G1' for input starting with '$' at 74:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$ff' at 75:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 76:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 76:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$RE' for input starting with '$' at 78:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$LE' for input starting with '$' at 78:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$AS' for input starting with '$' at 78:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$00' at 79:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 80:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 80:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 85:11
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 85:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$AD' for input starting with '$' at 85:16
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$AD' at 85:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$C0' for input starting with '$' at 85:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$C0' at 85:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 85:26
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 85:26
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$dead' at 86:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$beef' for input starting with '$' at 87:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$beef' at 87:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$NE' for input starting with '$' at 93:15
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$VE' for input starting with '$' at 93:20
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$R1' for input starting with '$' at 93:25
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 95:15
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 95:15
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BU' for input starting with '$' at 95:20
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$G2' for input starting with '$' at 95:25
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 109:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 109:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1FF' for input starting with '$' at 110:23
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1FF' at 110:23
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FFFF' for input starting with '$' at 111:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FFFF' at 111:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10000' for input starting with '$' at 112:23
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10000' at 112:23
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00FF' for input starting with '$' at 115:25
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00FF' at 115:25
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0200' for input starting with '$' at 116:24
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0200' at 116:24
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00FF' for input starting with '$' at 119:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00FF' at 119:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0055' for input starting with '$' at 120:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0055' at 120:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00' for input starting with '$' at 123:7
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00' at 123:7
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 123:12
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 123:12
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$100' for input starting with '$' at 123:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$100' at 123:17
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0000' for input starting with '$' at 124:7
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0000' at 124:7
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FFFF' for input starting with '$' at 124:14
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FFFF' at 124:14
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10000' for input starting with '$' at 124:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10000' at 124:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 128:24
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 128:24
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$80' for input starting with '$' at 128:29
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$80' at 128:29
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0801' for input starting with '$' at 148:7
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0801' at 148:7
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0400' for input starting with '$' at 149:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0400' at 149:17
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 150:17
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 150:17
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d021' for input starting with '$' at 151:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d021' at 151:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$01' at 158:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 159:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 159:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d021' for input starting with '$' at 162:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d021' at 162:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 165:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 166:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 167:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$ff' for input starting with '$' at 171:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$ff' at 171:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1000' for input starting with '$' at 193:18
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1000' at 193:18
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$ff' at 194:13
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$00' at 196:13
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$01' for input starting with '$' at 204:11
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$01' at 204:11
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$02' for input starting with '$' at 204:16
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$02' at 204:16
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$03' for input starting with '$' at 204:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$03' at 204:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$04' for input starting with '$' at 204:26
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$04' at 204:26
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 214:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 215:9
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 215:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$02' for input starting with '$' at 220:21
2025/10/01 11:25:44 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$02' at 220:21
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 234:9
2025/10/01 11:25:44 lexer.go:632: [WARN] Illegal character found at 237:9
2025/10/01 11:25:44 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 289:9
2025/10/01 11:25:44 semantic.go:62: [DEBUG] generateSemanticTokens: Generated 601 tokens
2025/10/01 11:25:44 server.go:1188: Sending response: {"id":2,"jsonrpc":"2.0","result":{"data":[0,0,41,6,0,1,0,61,6,0,2,0,80,6,0,1,0,31,6,0,1,0,80,6,0,2,0,44,6,0,1,0,6,0,0,0,7,9,1,0,0,10,1,8,0,0,2,5,5,0,1,0,6,0,0,0,7,6,1,0,0,7,1,8,0,0,2,3,5,0,1,0,6,0,0,0,7,4,1,0,0,5,1,8,0,0,2,1,5,0,2,0,38,6,0,1,0,6,0,0,0,7,5,1,0,0,6,1,8,0,0,2,9,1,0,0,10,1,8,0,0,2,6,1,0,0,26,18,6,0,1,0,6,0,0,0,7,7,1,0,0,8,1,8,0,0,2,5,1,0,0,6,1,8,0,0,2,1,5,0,0,27,17,6,0,1,0,6,0,0,0,7,12,1,0,0,13,1,8,0,0,2,7,1,0,0,11,1,5,0,0,19,13,6,0,1,0,6,0,0,0,7,13,1,0,0,14,1,8,0,0,2,12,1,0,0,16,1,5,0,0,13,14,6,0,1,0,6,0,0,0,7,6,1,0,0,7,1,8,0,0,2,13,1,0,0,16,3,5,0,0,20,14,6,0,1,0,6,0,0,0,7,8,1,0,0,9,1,8,0,0,2,6,1,0,0,9,3,5,0,0,25,13,6,0,1,0,6,0,0,0,7,5,1,0,0,6,1,8,0,0,2,8,1,0,0,11,3,5,0,0,26,14,6,0,1,0,6,0,0,0,7,6,1,0,0,7,1,8,0,0,2,5,1,0,0,8,2,5,0,0,28,19,6,0,2,0,44,6,0,1,0,6,0,0,0,7,7,1,0,0,8,1,8,0,0,3,9,1,0,0,10,1,8,0,0,2,6,1,0,0,8,1,8,0,0,3,4,1,0,0,5,1,8,0,0,2,1,5,0,1,0,6,0,0,0,7,6,1,0,0,7,1,8,0,0,4,5,1,0,0,6,1,8,0,0,2,2,5,0,0,4,1,8,0,0,2,1,5,0,0,5,5,5,0,1,0,6,0,0,0,7,8,1,0,0,9,1,8,0,0,2,9,1,0,0,10,1,8,0,0,3,6,1,0,0,7,1,8,0,0,2,4,1,0,0,6,1,8,0,0,2,1,5,0,2,0,59,6,0,1,0,6,0,0,0,7,8,1,0,0,9,1,8,0,0,2,3,2,1,0,4,1,8,0,0,1,2,5,0,0,28,21,6,0,1,0,6,0,0,0,7,7,1,0,0,8,1,8,0,0,2,3,2,1,0,4,2,5,0,0,4,2,5,0,0,26,22,6,0,1,0,6,0,0,0,7,7,1,0,0,8,1,8,0,0,2,3,2,1,0,4,1,5,0,0,3,2,5,0,0,27,22,6,0,1,0,6,0,0,0,7,7,1,0,0,8,1,8,0,0,2,5,2,1,0,6,3,5,0,0,28,21,6,0,2,0,65,6,0,1,0,6,0,0,0,7,11,1,0,0,12,1,8,0,0,2,3,2,1,0,29,24,6,0,1,0,6,0,0,0,7,11,1,0,0,12,1,8,0,0,2,3,2,1,0,4,2,5,0,0,25,23,6,0,1,0,6,0,0,0,7,11,1,0,0,12,1,8,0,0,2,3,2,1,0,4,1,5,0,0,3,1,5,0,0,3,1,5,0,0,19,24,6,0,2,0,80,6,0,1,0,31,6,0,1,0,80,6,0,2,0,59,6,0,1,0,6,0,0,0,7,9,1,0,0,10,1,8,0,0,2,5,5,0,1,0,6,0,0,0,7,14,1,0,0,15,1,8,0,2,0,41,6,0,1,0,4,0,0,0,6,3,1,0,0,4,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,1,1,8,0,0,1,1,8,0,1,4,5,0,0,0,6,1,1,0,0,42,23,6,0,1,4,5,0,0,0,6,9,1,0,0,10,1,8,0,0,2,1,1,0,3,0,6,0,0,0,7,13,1,0,0,14,1,8,0,2,0,48,6,0,1,0,4,0,0,0,6,3,1,0,0,4,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,1,1,8,0,0,1,1,8,0,1,4,4,0,0,0,6,3,1,0,0,4,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,1,1,8,0,0,1,1,8,0,1,8,5,0,0,0,6,1,1,0,0,3,1,1,0,0,35,26,6,0,1,8,5,0,0,0,7,1,1,0,0,2,1,8,0,0,2,2,5,0,0,4,1,8,0,0,2,1,1,0,4,0,37,6,0,1,0,4,0,0,0,6,3,1,0,0,4,4,1,0,0,5,1,8,0,0,2,9,1,0,0,11,4,1,0,0,5,1,8,0,0,2,9,1,0,0,10,1,8,0,0,2,4,5,0,0,6,4,1,0,0,5,1,8,0,0,1,1,8,0,0,2,3,5,0,1,4,5,0,0,0,6,1,8,0,0,1,4,1,0,0,6,1,8,0,0,1,4,1,0,0,34,27,6,0,3,0,58,6,0,1,0,6,0,0,0,7,10,1,0,0,11,1,8,0,0,2,1,5,0,1,0,6,0,0,0,7,13,1,0,0,14,1,8,0,0,2,1,5,0,2,0,32,6,0,1,0,3,0,0,0,5,10,1,0,1,4,5,0,0,0,6,3,5,0,0,41,13,6,0,1,4,3,0,0,0,4,4,5,0,1,4,3,0,0,0,4,5,5,0,2,4,5,0,0,0,47,15,6,0,1,4,3,0,0,0,4,4,5,0,1,4,3,0,0,0,4,5,5,0,3,0,47,6,0,1,0,3,0,0,0,5,1,5,0,1,4,5,0,0,0,6,3,5,0,0,5,3,5,0,0,5,3,5,0,0,5,3,5,0,0,26,29,6,0,1,4,3,0,0,0,4,6,5,0,1,4,3,0,0,0,4,5,5,0,3,0,41,6,0,1,0,3,0,0,0,5,10,1,0,1,4,3,0,0,0,5,13,1,0,1,8,5,0,0,0,43,41,6,0,2,8,5,0,0,0,6,3,5,0,0,37,43,6,0,4,0,32,6,0,1,1,5,1,0,0,6,10,1,0,1,4,5,0,0,0,6,19,7,0,3,1,6,1,0,0,7,16,1,0,1,4,5,0,0,0,6,20,7,0,3,0,48,6,0,1,0,6,0,0,0,7,10,1,0,0,11,1,8,0,0,2,3,5,0,1,0,6,0,0,0,7,12,1,0,0,13,1,8,0,0,2,4,5,0,0,29,21,6,0,1,0,6,0,0,0,7,10,1,0,0,11,1,8,0,0,2,5,5,0,1,0,6,0,0,0,7,12,1,0,0,13,1,8,0,0,2,6,5,0,0,29,23,6,0,2,0,31,6,0,1,0,6,0,0,0,7,14,1,0,0,15,1,8,0,0,2,5,5,0,1,0,6,0,0,0,7,13,1,0,0,14,1,8,0,0,2,5,5,0,2,0,15,2,0,1,4,3,0,0,0,4,5,5,0,0,13,40,6,0,1,4,3,0,0,0,4,5,5,0,0,13,40,6,0,2,0,41,6,0,1,0,5,0,0,0,6,3,5,0,0,5,3,5,0,0,5,4,5,0,0,35,33,6,0,1,0,5,0,0,0,6,5,5,0,0,7,5,5,0,0,7,6,5,0,0,31,35,6,0,2,0,37,6,0,1,0,6,0,0,0,7,9,1,0,0,10,1,8,0,0,2,3,2,1,0,4,1,8,0,0,1,3,5,0,0,27,26,6,0,1,0,6,0,0,0,7,9,1,0,0,10,1,8,0,0,2,3,2,1,0,4,3,5,0,0,5,3,5,0,0,23,21,6,0,1,0,80,6,0,1,0,75,6,0,2,0,42,6,0,1,0,5,0,0,0,6,14,7,0,1,0,77,6,0,2,0,48,6,0,1,0,4,0,0,0,6,3,1,0,0,4,5,1,0,0,6,1,8,0,0,2,1,5,0,0,3,5,1,0,0,6,1,8,0,0,2,2,5,0,0,4,5,1,0,0,5,1,8,0,0,1,1,8,0,1,4,4,0,0,0,6,3,1,0,0,4,5,1,0,0,6,1,8,0,0,2,1,5,0,0,3,5,1,0,0,6,1,8,0,0,2,3,5,0,0,5,5,1,0,0,5,1,8,0,0,1,1,8,0,0,7,33,6,0,1,8,5,0,0,0,6,5,1,0,0,6,1,8,0,0,2,5,1,0,4,0,80,6,0,1,0,28,6,0,1,0,80,6,0,2,0,22,6,0,1,1,2,1,0,0,3,1,8,0,0,2,5,5,0,0,6,15,7,0,1,0,6,0,0,0,7,6,1,0,0,7,1,8,0,0,2,5,5,0,1,0,6,0,0,0,7,6,1,0,0,7,1,8,0,0,2,5,5,0,1,0,6,0,0,0,7,10,1,0,0,11,1,8,0,0,2,5,5,0,2,0,31,6,0,1,0,6,2,0,1,4,3,0,0,2,4,54,6,0,1,4,3,0,0,0,4,4,5,0,1,4,3,0,0,0,4,5,5,0,0,13,41,6,0,2,4,39,6,0,1,4,3,0,0,0,4,5,5,0,0,13,35,6,0,2,4,36,6,0,1,4,3,0,0,0,4,1,8,0,0,1,5,1,0,0,12,47,6,0,1,4,3,0,0,0,4,1,8,0,0,1,1,8,0,0,1,6,1,0,0,11,20,6,0,1,4,3,0,0,0,4,1,8,0,0,1,1,8,0,0,1,6,1,0,0,11,21,6,0,2,4,46,6,0,1,4,3,0,0,1,4,3,0,0,0,4,3,5,0,0,13,39,6,0,2,0,10,2,0,1,4,39,6,0,1,4,3,0,0,0,4,9,1,0,0,13,33,6,0,1,4,3,0,0,0,4,5,1,0,0,13,33,6,0,2,4,45,6,0,1,4,3,0,0,0,4,10,1,0,2,4,3,0,0,2,0,43,6,0,1,0,11,2,0,1,4,3,0,0,2,4,28,6,0,1,4,4,0,0,0,6,3,1,0,0,4,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,2,1,8,0,0,2,1,5,0,0,3,1,1,0,0,1,1,8,0,0,1,1,8,0,1,8,5,0,0,0,6,1,1,0,0,2,1,8,0,0,2,1,5,0,3,4,30,6,0,1,4,3,0,0,0,5,5,1,0,0,6,1,8,0,0,2,5,5,0,1,8,3,0,0,0,4,4,5,0,2,8,3,0,0,0,4,4,5,0,3,4,3,0,0,1,4,3,0,0,2,0,15,6,0,1,0,13,2,0,1,4,5,0,0,0,6,3,5,0,0,5,3,5,0,0,5,3,5,0,0,5,3,5,0,1,4,5,0,0,0,6,5,1,0,0,7,9,1,0,0,11,10,1,0,1,4,5,0,0,0,6,15,7,0,2,0,31,6,0,1,0,4,0,0,0,5,7,1,0,0,8,1,8,0,0,2,1,5,0,1,0,6,0,0,0,7,9,1,0,0,10,1,8,0,0,2,3,5,0,2,0,29,6,0,1,0,6,0,0,0,7,14,1,0,0,15,5,1,0,1,4,3,0,0,0,4,1,8,0,0,1,5,1,0,1,4,3,0,0,0,4,5,5,0,3,0,19,6,0,1,0,13,2,0,1,5,14,1,0,0,15,3,5,0,0,6,35,6,0,1,4,3,0,0,2,0,80,6,0,1,0,29,6,0,1,0,80,6,0,2,0,13,2,0,1,4,38,6,0,2,4,53,6,0,1,4,3,0,0,0,16,59,6,0,2,4,56,6,0,1,4,3,0,0,0,4,1,8,0,0,12,54,6,0,2,4,41,6,0,1,4,3,0,0,0,16,35,6,0,2,4,51,6,0,1,4,6,0,0,0,7,4,1,0,0,5,1,8,0,0,2,9,1,0,0,10,1,8,0,0,5,41,6,0,2,4,3,0,0,2,0,80,6,0,1,0,26,6,0,1,0,80,6,0,2,0,11,2,0,1,4,49,6,0,2,4,19,6,0,1,4,22,6,0,2,4,25,6,0,1,4,36,6,0,2,4,34,6,0,1,4,28,6,0,2,4,26,6,0,1,4,20,6,0,2,4,3,0,0,2,0,80,6,0,1,0,30,6,0,1,0,80,6,0,2,0,17,2,0,1,4,43,6,0,1,4,5,0,0,0,6,4,5,0,0,6,1,1,0,2,4,39,6,0,1,4,10,2,0,0,11,3,0,0,1,4,10,2,0,0,11,3,0,0,1,4,10,2,0,0,11,3,0,0,1,4,10,2,0,0,11,3,0,0,1,4,10,2,0,0,11,3,0,0,1,4,42,6,0,2,4,3,0,0,2,0,80,6,0,1,0,28,6,0,1,0,80,6,0,2,0,11,2,0,1,4,54,6,0,1,4,3,0,0,0,4,1,8,0,0,1,5,1,0,0,12,31,6,0,1,4,3,0,0,0,4,6,1,0,0,13,38,6,0,1,4,3,0,0,0,4,10,1,0,0,13,33,6,0,2,4,53,6,0,1,4,6,0,0,0,7,8,1,0,0,9,1,8,0,0,2,3,2,1,0,4,1,8,0,0,1,3,5,0,0,8,33,6,0,2,4,3,0,0,2,0,62,6,0]}}
2025/10/01 11:25:49 server.go:648: Received payload: {"jsonrpc":"2.0","params":{"settings":{"6510lsp":{"deadCodeDetection":{"enabled":true,"showWarnings":true},"styleGuideEnforcement":{"showHints":true,"enabled":true,"upperCaseConstants":true,"descriptiveLabels":true},"warnUnusedLabels":true,"zeroPageOptimization":{"enabled":true,"showHints":true},"branchDistanceValidation":{"enabled":true,"showWarnings":true},"illegalOpcodeDetection":{"enabled":true,"showWarnings":true},"hardwareBugDetection":{"jmpIndirectBug":true,"enabled":true,"showWarnings":true},"memoryLayoutAnalysis":{"showStackWarnings":true,"showROMWriteWarnings":true,"enabled":true,"showIOAccess":true},"magicNumberDetection":{"showHints":true,"enabled":true,"c64Addresses":true}}}},"method":"workspace/didChangeConfiguration"}
2025/10/01 11:25:49 server.go:722: [DEBUG] Handling workspace/didChangeConfiguration notification.
2025/10/01 11:25:49 server.go:727: [DEBUG] Updating LSP configuration
2025/10/01 11:25:49 server.go:333: [DEBUG] LSP Configuration updated
2025/10/01 11:25:49 server.go:734: [DEBUG] Invalidated parse cache for file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm due to config change
2025/10/01 11:25:49 server.go:480: [DEBUG] Queued analysis job for file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm
2025/10/01 11:25:49 server.go:745: [INFO] Configuration updated and documents re-analyzed
2025/10/01 11:25:49 server.go:392: [DEBUG] Cache miss for document file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm - parsing
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Comprehensive Kick Assembler Test File' at 1:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Tests both Phase 1 new features and existing functionality' at 2:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 4:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// PHASE 1 NEW FEATURES TESTING' at 5:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 6:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Enhanced Arithmetic Expression Evaluation' at 8:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 9:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1000' for input starting with '$' at 9:20
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1000' at 9:20
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 10:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$20' for input starting with '$' at 10:17
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$20' at 10:17
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 11:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test complex arithmetic expressions' at 13:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 14:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Simple addition' at 14:54
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 15:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Multiplication' at 15:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 16:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LEFT_SHIFT '<<' at 16:31
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_DEC '1' at 16:34
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Left shift' at 16:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 17:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token RIGHT_SHIFT '>>' at 17:37
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_DEC '2' at 17:40
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Right shift' at 17:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 18:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 18:33
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 18:33
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token BITWISE_AND '&' at 18:31
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FF' at 18:33
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Bitwise AND' at 18:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 19:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0F' for input starting with '$' at 19:28
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0F' at 19:28
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token BITWISE_OR '|' at 19:26
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$0F' at 19:28
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Bitwise OR' at 19:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 20:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$AA' for input starting with '$' at 20:27
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$AA' at 20:27
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token BITWISE_XOR '^' at 20:25
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$AA' at 20:27
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Bitwise XOR' at 20:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 21:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MODULO '%' at 21:23
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_DEC '16' at 21:25
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Modulo operation' at 21:53
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test grouped expressions with parentheses' at 23:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 24:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 25:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF00' for input starting with '$' at 25:38
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF00' at 25:38
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token BITWISE_AND '&' at 25:36
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FF00' at 25:38
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 26:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test builtin function validation (should work correctly)' at 28:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 29:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 1 parameter' at 29:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 30:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 2 parameters' at 30:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 31:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 2 parameters' at 31:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 32:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: 1 parameter' at 32:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test invalid builtin function calls (should generate warnings)' at 34:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 35:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid: 0 parameters' at 35:51
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 36:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid: 1 parameter' at 36:51
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 37:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid: 3 parameters' at 37:51
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 39:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// PHASE 2 NEW FEATURES TESTING' at 40:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 41:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Enhanced .for Directive Processing with Scope Management' at 43:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 44:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$2000' for input starting with '$' at 44:20
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$2000' at 44:20
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 45:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BUGI' for input starting with '$' at 45:25
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Simple .for loop with scoped variables' at 47:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.for' at 48:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'test_after_48' at 53:8
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BUGI' for input starting with '$' at 53:24
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Nested .for loops with proper scope isolation' at 55:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.for' at 56:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$100' for input starting with '$' at 64:48
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$100' at 64:48
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10' for input starting with '$' at 64:62
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10' at 64:62
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 74:11
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 74:11
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BU' for input starting with '$' at 74:16
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$G1' for input starting with '$' at 74:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$ff' at 75:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 76:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 76:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$RE' for input starting with '$' at 78:11
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$LE' for input starting with '$' at 78:16
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$AS' for input starting with '$' at 78:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$00' at 79:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 80:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 80:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.if' at 84:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 85:11
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 85:11
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$AD' for input starting with '$' at 85:16
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$AD' at 85:16
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$C0' for input starting with '$' at 85:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$C0' at 85:21
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 85:26
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 85:26
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$dead' at 86:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$beef' for input starting with '$' at 87:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$beef' at 87:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.if' at 91:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$NE' for input starting with '$' at 93:15
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$VE' for input starting with '$' at 93:20
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$R1' for input starting with '$' at 93:25
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$DE' for input starting with '$' at 95:15
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$DE' at 95:15
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$BU' for input starting with '$' at 95:20
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token ILLEGAL matched '$G2' for input starting with '$' at 95:25
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// .ifdef and .ifndef directives' at 99:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DOT '.' at 100:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'ifndef' at 104:2
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'undefined_symbol' at 104:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LBRACE '{' at 104:26
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_TEXT '.text' at 105:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token RBRACE '}' at 106:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Type System Integration - Enhanced Validation' at 108:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 109:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 109:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 109:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 110:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1FF' for input starting with '$' at 110:23
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1FF' at 110:23
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: > 255' at 110:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 111:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FFFF' for input starting with '$' at 111:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FFFF' at 111:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 112:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10000' for input starting with '$' at 112:23
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10000' at 112:23
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: > 65535' at 112:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Zero-page optimization hints' at 114:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 115:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00FF' for input starting with '$' at 115:25
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00FF' at 115:25
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 116:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0200' for input starting with '$' at 116:24
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0200' at 116:24
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'zero_page_test:' at 118:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00FF' for input starting with '$' at 119:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00FF' at 119:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 119:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should suggest zero page optimization' at 119:22
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0055' for input starting with '$' at 120:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0055' at 120:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 120:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should suggest zero page optimization' at 120:22
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Range validation in different contexts' at 122:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$00' for input starting with '$' at 123:7
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$00' at 123:7
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.byte' at 123:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 123:12
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 123:12
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 123:10
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FF' at 123:12
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$100' for input starting with '$' at 123:17
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$100' at 123:17
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 123:15
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$100' at 123:17
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: $100 > byte range' at 123:52
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0000' for input starting with '$' at 124:7
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0000' at 124:7
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.word' at 124:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FFFF' for input starting with '$' at 124:14
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FFFF' at 124:14
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 124:12
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$FFFF' at 124:14
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$10000' for input starting with '$' at 124:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$10000' at 124:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 124:19
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$10000' at 124:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should warn: $10000 > word range' at 124:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Function parameter type validation' at 126:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 127:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: number parameter' at 127:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 128:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$FF' for input starting with '$' at 128:24
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$FF' at 128:24
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$80' for input starting with '$' at 128:29
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$80' at 128:29
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Valid: two numbers' at 128:52
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.const invalid_abs_type = abs("text")             // Invalid: string parameter' at 129:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.const invalid_min_type = min($FF, "text")        // Invalid: mixed types' at 130:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// String validation with escape sequences' at 132:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_TEXT '.text' at 133:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.text "Invalid \x escape"                        // Invalid escape sequence' at 134:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Performance Analysis - Complex Loop Detection' at 136:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_FLOW '.for' at 137:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0801' for input starting with '$' at 148:7
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0801' at 148:7
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$0400' for input starting with '$' at 149:17
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$0400' at 149:17
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 150:17
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 150:17
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d021' for input starting with '$' at 151:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d021' at 151:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$01' at 158:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 159:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 159:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d021' for input starting with '$' at 162:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d021' at 162:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 165:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 166:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 167:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$ff' for input starting with '$' at 171:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$ff' at 171:9
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$1000' for input starting with '$' at 193:18
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$1000' at 193:18
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$ff' at 194:13
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LBRACE '{' at 195:12
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '#$00' at 196:13
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 196:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token RBRACE '}' at 197:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'pla' at 199:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 200:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Data section' at 202:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'data_section:' at 203:1
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$01' for input starting with '$' at 204:11
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$01' at 204:11
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.byte' at 204:5
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$02' for input starting with '$' at 204:16
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$02' at 204:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 204:14
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$02' at 204:16
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$03' for input starting with '$' at 204:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$03' at 204:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 204:19
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$03' at 204:21
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$04' for input starting with '$' at 204:26
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$04' at 204:26
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 204:24
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token NUMBER_HEX '$04' at 204:26
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.word' at 205:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 205:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'main_loop' at 205:18
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 205:27
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'subroutine' at 205:29
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_TEXT '.text' at 206:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test variables and constants' at 208:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.var' at 209:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 210:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Advanced directive testing' at 212:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_ASM '.macro' at 213:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LPAREN '(' at 213:22
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'color' at 213:23
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token RPAREN ')' at 213:28
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LBRACE '{' at 213:30
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 214:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 214:5
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$d020' for input starting with '$' at 215:9
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$d020' at 215:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 215:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token RBRACE '}' at 216:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Test macro usage' at 218:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'border_setup:' at 219:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COLON ':' at 220:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'SetBorderColor' at 220:6
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token NUMBER_HEX matched '$02' for input starting with '$' at 220:21
2025/10/01 11:25:49 lexer.go:624: [DEBUG] Lexer: Matched TOKEN_NUMBER_HEX '$02' at 220:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should validate macro parameters' at 220:27
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 221:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 223:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// COMPLETION CONTEXT TESTING' at 224:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 225:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'context_test:' at 227:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After label: should offer mnemonics' at 228:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After mnemonic + space: should NOT offer mnemonics' at 230:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 231:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Cursor here should offer addressing modes, not mnemonics' at 231:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After #: should offer constants and builtin functions' at 233:5
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 234:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 234:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// After $: should offer memory addresses' at 236:5
2025/10/01 11:25:49 lexer.go:632: [WARN] Illegal character found at 237:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 237:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should offer: $D020, $D021, etc.' at 237:21
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// In expressions: should offer appropriate symbols' at 239:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 240:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 242:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 244:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// ERROR DETECTION TESTING' at 245:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 246:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'error_test:' at 248:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// These should generate appropriate diagnostics:' at 249:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Undefined symbol' at 251:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//lda undefined_symbol' at 252:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid memory address' at 254:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//sta $10000  // Beyond 16-bit range' at 255:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Division by zero in expressions' at 257:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.const invalid = total / 0' at 258:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Invalid directive usage' at 260:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '//.invalid_directive' at 261:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 263:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 265:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// PERFORMANCE TESTING SECTION' at 266:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 267:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'performance_test:' at 269:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Large data block for performance testing' at 270:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.fill' at 271:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMA ',' at 271:15
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token IDENTIFIER 'i' at 271:17
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Many labels for symbol table testing' at 273:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_001:' at 274:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 274:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_002:' at 275:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 275:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_003:' at 276:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 276:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_004:' at 277:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 277:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'label_005:' at 278:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'nop' at 278:16
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// ... (would continue for stress testing)' at 279:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 281:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 283:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// HOVER INFORMATION TESTING' at 284:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// =============================================================================' at 285:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token LABEL 'hover_test:' at 287:1
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Hovering over these should show useful information:' at 288:5
2025/10/01 11:25:49 lexer.go:594: [DEBUG] Lexer: Token HASH matched '#' for input starting with '$' at 289:9
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'lda' at 289:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show calculated value' at 289:22
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_STD 'sta' at 290:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show address and description' at 290:22
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'jsr' at 291:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show symbol information' at 291:22
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Hover over builtin functions should show signature' at 293:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token DIRECTIVE_KICK_DATA '.const' at 294:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// Should show function signature' at 294:36
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token MNEMONIC_CTRL 'rts' at 296:5
2025/10/01 11:25:49 parser.go:595: [DEBUG] Parser: Processing token COMMENT '// End of file - cursor at end should offer global completions' at 298:1
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'base_addr'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'base_addr' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'offset'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'offset' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'size'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'size' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'total'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'total' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'doubled'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'doubled' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'shifted_left'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'shifted_left' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'shifted_right'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'shifted_right' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'masked'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'masked' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'combined'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'combined' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'xored'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'xored' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'modulo'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'modulo' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'complex'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'complex' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'nested'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'nested' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'priority'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'priority' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'absolute'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'absolute' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'minimum'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'minimum' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'maximum'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'maximum' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'floored'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'floored' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_abs'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'invalid_abs' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_min'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'invalid_min' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_max'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'invalid_max' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'loop_base'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'loop_base' to scope 'root'
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_byte'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'valid_byte' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_byte'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'invalid_byte' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_word'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'valid_word' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'invalid_word'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'invalid_word' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'zero_page_addr'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'zero_page_addr' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'non_zero_page'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'non_zero_page' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'zero_page_test' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_abs'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'valid_abs' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'valid_min'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'valid_min' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'data_section' to scope 'root'
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.var' with name 'counter'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'counter' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'max_items'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'max_items' to scope 'root'
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'border_setup' to scope 'root'
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'context_test' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'test'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'test' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'error_test' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'performance_test' to scope 'root'
2025/10/01 11:25:49 parser.go:205: [DEBUG] buildScope: Encountered unknown statement type: *lsp.ExpressionStatement
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'label_001' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'label_002' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'label_003' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'label_004' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'label_005' to scope 'root'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'hover_test' to scope 'root'
2025/10/01 11:25:49 parser.go:150: [DEBUG] buildScope: Creating symbol for directive '.const' with name 'test_abs'
2025/10/01 11:25:49 symbol.go:99: [DEBUG] Adding symbol 'test_abs' to scope 'root'
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=base_addr
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=base_addr, addr=4096
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=offset
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=offset, addr=32
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=size
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=size, addr=8
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=total
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=total, addr=4128
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=doubled
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=doubled, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_left
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=shifted_left, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_right
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=shifted_right, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=masked
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=masked, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=combined
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=combined, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=xored
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=xored, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=modulo
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=modulo, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=complex
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=complex, addr=24768
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=nested
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=nested, addr=12414
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=priority
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=priority, addr=4351
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=absolute
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=absolute, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for absolute
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=minimum
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=minimum, addr=10
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=maximum
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=maximum, addr=15
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=floored
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=floored, addr=3
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_abs
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_abs, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_abs
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_min
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_min, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_min
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_max
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_max, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_max
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=loop_base
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=loop_base, addr=8192
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_before_48
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=loop_base
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=x
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.InfixExpression, value=&{Token:{Type:PLUS Literal:+ Line:59 Column:24} Left:0x14000031260 Operator:+ Right:0x1400007f400}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=-1, range=0-65535
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.PrefixExpression, value=&{Token:{Type:LESS Literal:< Line:65 Column:11} Operator:< Right:0x1400007f540}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=-1, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=debug_mode
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=debug_mode, addr=1
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=release_build
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=release_build, addr=0
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:74 Column:11} Value:222}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:85 Column:11} Value:222}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:95 Column:15} Value:222}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.ifdef, name=debug_mode
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_byte
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_byte, addr=255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_byte
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_byte, addr=511
2025/10/01 11:25:49 analyze.go:696: [DEBUG] processDirective .const: ADDING BYTE WARNING for invalid_byte, addr=511
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_word
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_word, addr=65535
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_word
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_word, addr=65536
2025/10/01 11:25:49 analyze.go:699: [DEBUG] processDirective .const: ADDING WORD WARNING for invalid_word, addr=65536
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=zero_page_addr
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=zero_page_addr, addr=255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=non_zero_page
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=non_zero_page, addr=512
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$00 Line:123 Column:7} Value:0}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=0, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$0000 Line:124 Column:7} Value:0}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=0, range=0-65535
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_abs
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_abs, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for valid_abs
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_min
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_min, addr=128
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=outer
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=screen
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=screen, addr=1024
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=border
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=border, addr=53280
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=background
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=background, addr=53281
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=INC, token=inc
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDX, token=ldx
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDY, token=ldy
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=DCP, token=dcp
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=JMP, token=jmp
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=BNE, token=bne
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=JSR, token=jsr
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$01 Line:204 Column:11} Value:1}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=1, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=start
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.var, name=counter
2025/10/01 11:25:49 analyze.go:720: [DEBUG] processDirective .const: name=counter, addr=0
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=max_items
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=max_items, addr=256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.macro, name=SetBorderColor
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=test, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.fill, name=.fill
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=LDA, token=lda
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=STA, token=sta
2025/10/01 11:25:49 analyze.go:1232: [DEBUG] checkZeroPageOptimization: mnemonic=JSR, token=jsr
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_abs
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=test_abs, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test_abs
2025/10/01 11:25:49 analyze.go:1747: [DEBUG] performTokenLevelRangeValidation: starting token-level analysis
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 49: .byte i                                         // i is accessible here
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'i' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'i'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 50: .word loop_base + i
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'loop_base + i' in word directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'loop_base + i'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 58: .byte x, y                                  // Both x and y accessible
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'x' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'x'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'y' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'y'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 59: .word (x * 16) + y
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '(x * 16) + y' in word directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '(x * 16) + y'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 65: .byte <addr, >addr                              // addr accessible in scope
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '<addr' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '<addr'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '>addr' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '>addr'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 74: .byte $DE, $BU, $G1                            // Debug code
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$BU' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$BU'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$G1' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$G1'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 78: .byte $RE, $LE, $AS                            // Release code
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$RE' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$RE'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$LE' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$LE'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$AS' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$AS'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 85: .byte $DE, $AD, $C0, $DE                       // Dead code - never executed
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$AD' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$C0' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 93: .byte $NE, $VE, $R1                        // Dead: debug_mode=1 AND release_build=0
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$NE' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$NE'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$VE' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$VE'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$R1' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$R1'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 95: .byte $DE, $BU, $G2                        // Live: debug_mode=1 AND NOT release_build
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$DE' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$BU' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$BU'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$G2' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value '$G2'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 123: .byte $00, $FF, $100                               // Should warn: $100 > byte range
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$00' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$FF' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$100' in byte directive
2025/10/01 11:25:49 analyze.go:1809: [DEBUG] validateTokenLevelDataDirective: ADDING WARNING for value 256 out of range
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 124: .word $0000, $FFFF, $10000                         // Should warn: $10000 > word range
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$0000' in word directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$FFFF' in word directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$10000' in word directive
2025/10/01 11:25:49 analyze.go:1809: [DEBUG] validateTokenLevelDataDirective: ADDING WARNING for value 65536 out of range
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 139: .byte outer * inner
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'outer * inner' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'outer * inner'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 189: .byte i * 2
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'i * 2' in byte directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'i * 2'
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing byte line 204: .byte $01, $02, $03, $04
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$01' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$02' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$03' in byte directive
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value '$04' in byte directive
2025/10/01 11:25:49 analyze.go:1771: [DEBUG] validateTokenLevelDataDirective: processing word line 205: .word start, main_loop, subroutine
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'start' in word directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'start'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'main_loop' in word directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'main_loop'
2025/10/01 11:25:49 analyze.go:1798: [DEBUG] validateTokenLevelDataDirective: checking value 'subroutine' in word directive
2025/10/01 11:25:49 analyze.go:1803: [DEBUG] validateTokenLevelDataDirective: could not parse value 'subroutine'
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=base_addr
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=base_addr, addr=4096
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=offset
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=offset, addr=32
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=size
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=size, addr=8
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=total
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=total, addr=4128
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=doubled
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=doubled, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_left
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=shifted_left, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=shifted_right
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=shifted_right, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=masked
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=masked, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=combined
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=combined, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=xored
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=xored, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=modulo
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=modulo, addr=8256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=complex
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=complex, addr=24768
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=nested
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=nested, addr=12414
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=priority
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=priority, addr=4351
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=absolute
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=absolute, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for absolute
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=minimum
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=minimum, addr=10
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=maximum
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=maximum, addr=15
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=floored
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=floored, addr=3
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_abs
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_abs, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_abs
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_min
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_min, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_min
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_max
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_max, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for invalid_max
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=loop_base
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=loop_base, addr=8192
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_before_48
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=loop_base
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=x
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.InfixExpression, value=&{Token:{Type:PLUS Literal:+ Line:59 Column:24} Left:0x14000031260 Operator:+ Right:0x1400007f400}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=-1, range=0-65535
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.PrefixExpression, value=&{Token:{Type:LESS Literal:< Line:65 Column:11} Operator:< Right:0x1400007f540}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=-1, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=debug_mode
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=debug_mode, addr=1
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=release_build
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=release_build, addr=0
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:74 Column:11} Value:222}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:85 Column:11} Value:222}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$DE Line:95 Column:15} Value:222}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=222, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.ifdef, name=debug_mode
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_byte
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_byte, addr=255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_byte
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_byte, addr=511
2025/10/01 11:25:49 analyze.go:696: [DEBUG] processDirective .const: ADDING BYTE WARNING for invalid_byte, addr=511
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_word
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_word, addr=65535
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=invalid_word
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=invalid_word, addr=65536
2025/10/01 11:25:49 analyze.go:699: [DEBUG] processDirective .const: ADDING WORD WARNING for invalid_word, addr=65536
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=zero_page_addr
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=zero_page_addr, addr=255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=non_zero_page
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=non_zero_page, addr=512
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$00 Line:123 Column:7} Value:0}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=0, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=.word
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$0000 Line:124 Column:7} Value:0}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=word, value=0, range=0-65535
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_abs
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_abs, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for valid_abs
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=valid_min
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=valid_min, addr=128
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=outer
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:648: [DEBUG] processDirective: node is nil
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=screen
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=screen, addr=1024
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=border
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=border, addr=53280
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=background
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=background, addr=53281
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: SEI
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: INC
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDX
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDY
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: DCP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: JMP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: BNE
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: JSR
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: PHA
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.for, name=.for
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=i
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.if, name=.if
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: PLA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.byte, name=.byte
2025/10/01 11:25:49 analyze.go:743: [DEBUG] processDirective .byte: node.Value type=*lsp.IntegerLiteral, value=&{Token:{Type:NUMBER_HEX Literal:$01 Line:204 Column:11} Value:1}
2025/10/01 11:25:49 analyze.go:1731: [DEBUG] checkRangeValidation: dataType=byte, value=1, range=0-255
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.word, name=start
2025/10/01 11:25:49 analyze.go:750: [DEBUG] processDirective .word: node.Value type=<nil>, value=<nil>
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.text, name=.text
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.var, name=counter
2025/10/01 11:25:49 analyze.go:720: [DEBUG] processDirective .const: name=counter, addr=0
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=max_items
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=max_items, addr=256
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.macro, name=SetBorderColor
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=test, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.fill, name=.fill
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: NOP
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: LDA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: STA
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: JSR
2025/10/01 11:25:49 analyze.go:667: [DEBUG] processDirective: directive=.const, name=test_abs
2025/10/01 11:25:49 analyze.go:688: [DEBUG] processDirective .const: name=test_abs, addr=-1
2025/10/01 11:25:49 analyze.go:703: [DEBUG] processDirective .const: evaluateExpression returned -1 for test_abs
2025/10/01 11:25:49 analyze.go:515: [DEBUG] Processing instruction: RTS
2025/10/01 11:25:49 server.go:457: [INFO] Reparsed document and updated symbol store for file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm
2025/10/01 11:25:49 server.go:1188: Sending response: {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"message":"Illegal character sequence '$BUGI'","range":{"start":{"line":44,"character":24},"end":{"line":44,"character":29}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$BUGI'","range":{"start":{"line":52,"character":23},"end":{"line":52,"character":28}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$RE'","range":{"start":{"line":77,"character":10},"end":{"line":77,"character":13}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$NE'","range":{"start":{"line":92,"character":14},"end":{"line":92,"character":17}},"severity":1,"source":"parser"},{"message":"expected identifier, got '=' instead","range":{"start":{"line":147,"character":4},"end":{"line":147,"character":5}},"severity":1,"source":"parser"},{"message":"expected ')', got 1 instead","range":{"start":{"line":192,"character":15},"end":{"line":192,"character":16}},"severity":1,"source":"parser"},{"message":"Illegal character sequence '$'","range":{"start":{"line":236,"character":8},"end":{"line":236,"character":9}},"severity":1,"source":"parser"},{"message":"Invalid addressing mode 'Implied' for instruction 'LDA'","range":{"start":{"line":230,"character":4},"end":{"line":230,"character":8}},"severity":1,"source":"parser"},{"message":"Constant 'invalid_byte' value $1FF out of byte range ($0-$FF)","range":{"start":{"line":109,"character":0},"end":{"line":109,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Constant 'invalid_word' value $10000 out of word range ($0-$FFFF)","range":{"start":{"line":111,"character":0},"end":{"line":111,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Consider zero-page addressing for $FF (saves 1 byte, 1 cycle)","range":{"start":{"line":118,"character":4},"end":{"line":118,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider zero-page addressing for $55 (saves 1 byte, 1 cycle)","range":{"start":{"line":119,"character":4},"end":{"line":119,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Value $100 out of byte range ($0-$FF)","range":{"start":{"line":122,"character":16},"end":{"line":122,"character":17}},"severity":2,"source":"enhanced-analyzer"},{"message":"Value $10000 out of word range ($0-$FFFF)","range":{"start":{"line":123,"character":20},"end":{"line":123,"character":21}},"severity":2,"source":"enhanced-analyzer"},{"message":"Incorrect number of arguments for builtin function 'abs'. Expected 1, got 0","range":{"start":{"line":34,"character":21},"end":{"line":34,"character":22}},"severity":2,"source":"analyzer"},{"message":"Incorrect number of arguments for builtin function 'min'. Expected 2, got 1","range":{"start":{"line":35,"character":21},"end":{"line":35,"character":22}},"severity":2,"source":"analyzer"},{"message":"Incorrect number of arguments for builtin function 'max'. Expected 2, got 3","range":{"start":{"line":36,"character":21},"end":{"line":36,"character":22}},"severity":2,"source":"analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":75,"character":4},"end":{"line":75,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":75,"character":4},"end":{"line":75,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":79,"character":4},"end":{"line":79,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":79,"character":4},"end":{"line":79,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Consider defining constant for address $DEAD","range":{"start":{"line":85,"character":4},"end":{"line":85,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider defining constant for address $BEEF","range":{"start":{"line":86,"character":4},"end":{"line":86,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"Constant 'invalid_byte' value $1FF out of byte range ($0-$FF)","range":{"start":{"line":109,"character":0},"end":{"line":109,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Constant 'invalid_word' value $10000 out of word range ($0-$FFFF)","range":{"start":{"line":111,"character":0},"end":{"line":111,"character":1}},"severity":2,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":158,"character":4},"end":{"line":158,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":158,"character":4},"end":{"line":158,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Background color register ($D021)","range":{"start":{"line":161,"character":4},"end":{"line":161,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D021 - ensure correct timing","range":{"start":{"line":161,"character":4},"end":{"line":161,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"'DCP' is an undocumented/illegal opcode - may not work on all systems","range":{"start":{"line":170,"character":4},"end":{"line":170,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Branch distance -183 out of range (-128 to +127)","range":{"start":{"line":175,"character":4},"end":{"line":175,"character":5}},"severity":1,"source":"enhanced-analyzer"},{"message":"Consider defining constant for Border color register ($D020)","range":{"start":{"line":214,"character":4},"end":{"line":214,"character":5}},"severity":4,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":214,"character":4},"end":{"line":214,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"I/O register access: $D020 - ensure correct timing","range":{"start":{"line":289,"character":4},"end":{"line":289,"character":5}},"severity":3,"source":"enhanced-analyzer"},{"message":"Unreachable code after unconditional jump","range":{"start":{"line":175,"character":4},"end":{"line":175,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Unreachable code after unconditional jump","range":{"start":{"line":178,"character":4},"end":{"line":178,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Unreachable code after unconditional jump","range":{"start":{"line":180,"character":4},"end":{"line":180,"character":5}},"severity":2,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'loop_base'","range":{"start":{"line":43,"character":7},"end":{"line":43,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'valid_byte'","range":{"start":{"line":108,"character":7},"end":{"line":108,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'offset'","range":{"start":{"line":9,"character":7},"end":{"line":9,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'xored'","range":{"start":{"line":19,"character":7},"end":{"line":19,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'absolute'","range":{"start":{"line":28,"character":7},"end":{"line":28,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'doubled'","range":{"start":{"line":14,"character":7},"end":{"line":14,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'shifted_left'","range":{"start":{"line":15,"character":7},"end":{"line":15,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'masked'","range":{"start":{"line":17,"character":7},"end":{"line":17,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'combined'","range":{"start":{"line":18,"character":7},"end":{"line":18,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'complex'","range":{"start":{"line":23,"character":7},"end":{"line":23,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'valid_word'","range":{"start":{"line":110,"character":7},"end":{"line":110,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'size'","range":{"start":{"line":10,"character":7},"end":{"line":10,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'modulo'","range":{"start":{"line":20,"character":7},"end":{"line":20,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'valid_abs'","range":{"start":{"line":126,"character":7},"end":{"line":126,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'floored'","range":{"start":{"line":31,"character":7},"end":{"line":31,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'invalid_min'","range":{"start":{"line":35,"character":7},"end":{"line":35,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'invalid_byte'","range":{"start":{"line":109,"character":7},"end":{"line":109,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'total'","range":{"start":{"line":13,"character":7},"end":{"line":13,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'shifted_right'","range":{"start":{"line":16,"character":7},"end":{"line":16,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'minimum'","range":{"start":{"line":29,"character":7},"end":{"line":29,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'maximum'","range":{"start":{"line":30,"character":7},"end":{"line":30,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'invalid_abs'","range":{"start":{"line":34,"character":7},"end":{"line":34,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'base_addr'","range":{"start":{"line":8,"character":7},"end":{"line":8,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'zero_page_addr'","range":{"start":{"line":114,"character":7},"end":{"line":114,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'test_abs'","range":{"start":{"line":293,"character":11},"end":{"line":293,"character":12}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'nested'","range":{"start":{"line":24,"character":7},"end":{"line":24,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'invalid_word'","range":{"start":{"line":111,"character":7},"end":{"line":111,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'non_zero_page'","range":{"start":{"line":115,"character":7},"end":{"line":115,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'priority'","range":{"start":{"line":25,"character":7},"end":{"line":25,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'invalid_max'","range":{"start":{"line":36,"character":7},"end":{"line":36,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'valid_min'","range":{"start":{"line":127,"character":7},"end":{"line":127,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'max_items'","range":{"start":{"line":209,"character":7},"end":{"line":209,"character":8}},"severity":4,"source":"enhanced-analyzer"},{"message":"Consider UPPER_CASE naming for constant 'test'","range":{"start":{"line":239,"character":11},"end":{"line":239,"character":12}},"severity":4,"source":"enhanced-analyzer"},{"message":"Unused constant 'loop_base'","range":{"start":{"line":43,"character":7},"end":{"line":43,"character":16}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'valid_byte'","range":{"start":{"line":108,"character":7},"end":{"line":108,"character":17}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'absolute'","range":{"start":{"line":28,"character":7},"end":{"line":28,"character":15}},"severity":2,"source":"analyzer"},{"message":"Unused variable 'counter'","range":{"start":{"line":208,"character":5},"end":{"line":208,"character":12}},"severity":2,"source":"analyzer"},{"message":"Unused label 'label_001'","range":{"start":{"line":273,"character":4},"end":{"line":273,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'complex'","range":{"start":{"line":23,"character":7},"end":{"line":23,"character":14}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'valid_word'","range":{"start":{"line":110,"character":7},"end":{"line":110,"character":17}},"severity":2,"source":"analyzer"},{"message":"Unused label 'data_section'","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":12}},"severity":2,"source":"analyzer"},{"message":"Unused label 'border_setup'","range":{"start":{"line":218,"character":0},"end":{"line":218,"character":12}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'modulo'","range":{"start":{"line":20,"character":7},"end":{"line":20,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'valid_abs'","range":{"start":{"line":126,"character":7},"end":{"line":126,"character":16}},"severity":2,"source":"analyzer"},{"message":"Unused label 'error_test'","range":{"start":{"line":247,"character":0},"end":{"line":247,"character":10}},"severity":2,"source":"analyzer"},{"message":"Unused label 'label_002'","range":{"start":{"line":274,"character":4},"end":{"line":274,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused label 'label_003'","range":{"start":{"line":275,"character":4},"end":{"line":275,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'floored'","range":{"start":{"line":31,"character":7},"end":{"line":31,"character":14}},"severity":2,"source":"analyzer"},{"message":"Unused label 'zero_page_test'","range":{"start":{"line":117,"character":0},"end":{"line":117,"character":14}},"severity":2,"source":"analyzer"},{"message":"Unused label 'context_test'","range":{"start":{"line":226,"character":0},"end":{"line":226,"character":12}},"severity":2,"source":"analyzer"},{"message":"Unused label 'label_005'","range":{"start":{"line":277,"character":4},"end":{"line":277,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'invalid_min'","range":{"start":{"line":35,"character":7},"end":{"line":35,"character":18}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'invalid_byte'","range":{"start":{"line":109,"character":7},"end":{"line":109,"character":19}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'minimum'","range":{"start":{"line":29,"character":7},"end":{"line":29,"character":14}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'maximum'","range":{"start":{"line":30,"character":7},"end":{"line":30,"character":14}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'invalid_abs'","range":{"start":{"line":34,"character":7},"end":{"line":34,"character":18}},"severity":2,"source":"analyzer"},{"message":"Unused label 'hover_test'","range":{"start":{"line":286,"character":0},"end":{"line":286,"character":10}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'zero_page_addr'","range":{"start":{"line":114,"character":7},"end":{"line":114,"character":21}},"severity":2,"source":"analyzer"},{"message":"Unused label 'performance_test'","range":{"start":{"line":268,"character":0},"end":{"line":268,"character":16}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'test_abs'","range":{"start":{"line":293,"character":11},"end":{"line":293,"character":19}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'nested'","range":{"start":{"line":24,"character":7},"end":{"line":24,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'invalid_word'","range":{"start":{"line":111,"character":7},"end":{"line":111,"character":19}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'non_zero_page'","range":{"start":{"line":115,"character":7},"end":{"line":115,"character":20}},"severity":2,"source":"analyzer"},{"message":"Unused label 'label_004'","range":{"start":{"line":276,"character":4},"end":{"line":276,"character":13}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'priority'","range":{"start":{"line":25,"character":7},"end":{"line":25,"character":15}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'invalid_max'","range":{"start":{"line":36,"character":7},"end":{"line":36,"character":18}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'valid_min'","range":{"start":{"line":127,"character":7},"end":{"line":127,"character":16}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'max_items'","range":{"start":{"line":209,"character":7},"end":{"line":209,"character":16}},"severity":2,"source":"analyzer"},{"message":"Unused constant 'test'","range":{"start":{"line":239,"character":11},"end":{"line":239,"character":15}},"severity":2,"source":"analyzer"}],"uri":"file:///Users/Ronald.Funk/My_Documents/source/gitlab/c64.nvim/comprehensive-test.asm"}}
2025/10/01 11:27:48 server.go:648: Received payload: {"id":3,"jsonrpc":"2.0","method":"shutdown"}
2025/10/01 11:27:48 server.go:710: [DEBUG] Handling shutdown request.
2025/10/01 11:27:48 server.go:1188: Sending response: {"id":3,"jsonrpc":"2.0","result":null}
2025/10/01 11:27:48 server.go:648: Received payload: {"jsonrpc":"2.0","method":"exit"}
2025/10/01 11:27:48 server.go:719: [DEBUG] Handling exit notification.
