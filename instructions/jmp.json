[
  {
    "mnemonic": "JMP",
    "description": "JMP (short for \"JuMP\") is the mnemonic for a machine language instruction which unconditionally transfers program execution to the specified address. To those familiar with BASIC programming; this is the machine language equivalent to GOTO. JMP is the only instruction in the 65xx instruction set which supports the purely indirect addressing mode. This indirect JMP provides for the use of vectors. While the user has no easy access to modify the contents of either BASIC or KERNAL ROM, both these parts of the system make ample use of vectors, set in RAM that the user can modify. This allows the user to \"divert\" parts of BASIC or KERNAL to custom routines.",
    "addressing_modes": [
      {
        "opcode": "4C",
        "addressing_mode": "Absolute",
        "assembler_format": "JMP nnnn",
        "length": 3,
        "cycles": 3
      },
      {
        "opcode": "6C",
        "addressing_mode": "Indirect",
        "assembler_format": "JMP (nnnn)",
        "length": 3,
        "cycles": 5
      }
    ],
    "cpu_flags": []
  }
]